graph(%self.1 : __torch__.utils_general_v2.___torch_mangle_6860.MobileNetECA,
      %x.1 : Tensor):
  %2 : NoneType = prim::Constant()
  %3 : bool = prim::Constant[value=0]()
  %4 : int = prim::Constant[value=2]() # /root/NASChainC100/utils_general_v2.py:272:8
  %5 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:272:8
  %stem.1 : __torch__.torch.nn.modules.container.___torch_mangle_408.Sequential = prim::GetAttr[name="stem"](%self.1)
  %29 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %30 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %31 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %32 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:22
  %33 : int = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:33
  %34 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %35 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.2 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %37 : str = prim::Constant[value="none"]()
  %_0.5 : __torch__.torch.nn.modules.conv.___torch_mangle_406.Conv2d = prim::GetAttr[name="0"](%stem.1)
  %_1.5 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_407.BatchNorm2d = prim::GetAttr[name="1"](%stem.1)
  %weight.36 : Tensor = prim::GetAttr[name="weight"](%_0.5)
  %bias.36 : Tensor? = prim::GetAttr[name="bias"](%_0.5)
  %42 : int[] = prim::ListConstruct(%33, %33)
  %43 : int[] = prim::ListConstruct(%33, %33)
  %44 : int[] = prim::ListConstruct(%33, %33)
  %input0.3 : Tensor = aten::conv2d(%x.1, %weight.36, %bias.36, %42, %43, %44, %33) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
  %training.10 : bool = prim::GetAttr[name="training"](%_1.5)
   = prim::If(%training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
    block0():
      %num_batches_tracked.6 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.5)
      %48 : Tensor = aten::add_(%num_batches_tracked.6, %33, %33) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
      -> ()
    block1():
      -> ()
  %training.12 : bool = prim::GetAttr[name="training"](%_1.5)
  %running_mean.6 : Tensor = prim::GetAttr[name="running_mean"](%_1.5)
  %running_var.6 : Tensor = prim::GetAttr[name="running_var"](%_1.5)
  %weight.34 : Tensor = prim::GetAttr[name="weight"](%_1.5)
  %bias.34 : Tensor = prim::GetAttr[name="bias"](%_1.5)
   = prim::If(%training.12) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
    block0():
      %54 : int[] = aten::size(%input0.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
      %size_prods.6 : int = aten::__getitem__(%54, %32) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
      %56 : int = aten::len(%54) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
      %57 : int = aten::sub(%56, %31) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
      %size_prods0.3 : int = prim::Loop(%57, %bn_training.2, %size_prods.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
        block0(%i.6 : int, %size_prods0.14 : int):
          %61 : int = aten::add(%i.6, %31) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
          %62 : int = aten::__getitem__(%54, %61) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
          %size_prods1.6 : int = aten::mul(%size_prods0.14, %62) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
          -> (%bn_training.2, %size_prods1.6)
      %64 : bool = aten::eq(%size_prods0.3, %33) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
       = prim::If(%64) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
        block0():
          %65 : str = aten::format(%34, %54) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
           = prim::RaiseException(%65, %35) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %input1.3 : Tensor = aten::batch_norm(%input0.3, %weight.34, %bias.34, %running_mean.6, %running_var.6, %training.12, %30, %29, %bn_training.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
  %x0.1 : Tensor = aten::gelu(%input1.3, %37) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
  %layers.1 : __torch__.torch.nn.modules.container.___torch_mangle_6857.ModuleList = prim::GetAttr[name="layers"](%self.1)
  %_0.3 : __torch__.utils_general_v2.___torch_mangle_6852.InvertedResidual = prim::GetAttr[name="0"](%layers.1)
  %_1.3 : __torch__.utils_general_v2.___torch_mangle_422.InvertedResidual = prim::GetAttr[name="1"](%layers.1)
  %_2 : __torch__.utils_general_v2.___torch_mangle_6854.InvertedResidual = prim::GetAttr[name="2"](%layers.1)
  %_3.2 : __torch__.utils_general_v2.___torch_mangle_2151.InvertedResidual = prim::GetAttr[name="3"](%layers.1)
  %_4.2 : __torch__.utils_general_v2.___torch_mangle_6856.InvertedResidual = prim::GetAttr[name="4"](%layers.1)
  %_5 : __torch__.utils_general_v2.___torch_mangle_1796.InvertedResidual = prim::GetAttr[name="5"](%layers.1)
  %_6.2 : __torch__.utils_general_v2.___torch_mangle_1975.InvertedResidual = prim::GetAttr[name="6"](%layers.1)
  %68 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %69 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
  %70 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %71 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %72 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %73 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %74 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %75 : str = prim::Constant[value="none"]()
  %76 : int = prim::Constant[value=60]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %77 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %78 : NoneType = prim::Constant()
  %79 : int = prim::Constant[value=1]()
  %use_res_connect.2 : bool = prim::GetAttr[name="use_res_connect"](%_0.3)
  %x1.1 : Tensor = prim::If(%use_res_connect.2) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.2 : __torch__.torch.nn.modules.container.___torch_mangle_6851.Sequential = prim::GetAttr[name="conv"](%_0.3)
      %_0.7 : __torch__.torch.nn.modules.conv.___torch_mangle_6844.Conv2d = prim::GetAttr[name="0"](%conv.2)
      %_1.7 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6845.BatchNorm2d = prim::GetAttr[name="1"](%conv.2)
      %_3.4 : __torch__.torch.nn.modules.conv.___torch_mangle_6846.Conv2d = prim::GetAttr[name="3"](%conv.2)
      %_4.4 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6845.BatchNorm2d = prim::GetAttr[name="4"](%conv.2)
      %_6.4 : __torch__.utils_general_v2.___torch_mangle_6849.ECABlock = prim::GetAttr[name="6"](%conv.2)
      %_7.2 : __torch__.torch.nn.modules.conv.___torch_mangle_6850.Conv2d = prim::GetAttr[name="7"](%conv.2)
      %_8.2 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="8"](%conv.2)
      %weight.18 : Tensor = prim::GetAttr[name="weight"](%_0.7)
      %bias.18 : Tensor? = prim::GetAttr[name="bias"](%_0.7)
      %92 : int[] = prim::ListConstruct(%79, %79)
      %93 : int[] = prim::ListConstruct(%68, %68)
      %94 : int[] = prim::ListConstruct(%79, %79)
      %input0.7 : Tensor = aten::conv2d(%x0.1, %weight.18, %bias.18, %92, %93, %94, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.28 : bool = prim::GetAttr[name="training"](%_1.7)
       = prim::If(%training.28) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.14 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.7)
          %98 : Tensor = aten::add_(%num_batches_tracked.14, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.16 : bool = prim::GetAttr[name="training"](%_1.7)
      %running_mean.14 : Tensor = prim::GetAttr[name="running_mean"](%_1.7)
      %running_var.14 : Tensor = prim::GetAttr[name="running_var"](%_1.7)
      %weight.20 : Tensor = prim::GetAttr[name="weight"](%_1.7)
      %bias.20 : Tensor = prim::GetAttr[name="bias"](%_1.7)
       = prim::If(%training.16) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %104 : int[] = aten::size(%input0.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.10 : int = aten::__getitem__(%104, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %106 : int = aten::len(%104) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %107 : int = aten::sub(%106, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.20 : int = prim::Loop(%107, %69, %size_prods.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.10 : int, %size_prods0.22 : int):
              %111 : int = aten::add(%i.10, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %112 : int = aten::__getitem__(%104, %111) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.10 : int = aten::mul(%size_prods0.22, %112) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.10)
          %114 : bool = aten::eq(%size_prods0.20, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%114) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %115 : str = aten::format(%70, %104) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%115, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.7 : Tensor = aten::batch_norm(%input0.7, %weight.20, %bias.20, %running_mean.14, %running_var.14, %training.16, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.5 : Tensor = aten::gelu(%input1.7, %75) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.22 : Tensor = prim::GetAttr[name="weight"](%_3.4)
      %bias.22 : Tensor? = prim::GetAttr[name="bias"](%_3.4)
      %120 : int[] = prim::ListConstruct(%79, %79)
      %121 : int[] = prim::ListConstruct(%79, %79)
      %122 : int[] = prim::ListConstruct(%79, %79)
      %input3.5 : Tensor = aten::conv2d(%input2.5, %weight.22, %bias.22, %120, %121, %122, %76) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.18 : bool = prim::GetAttr[name="training"](%_4.4)
       = prim::If(%training.18) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.10 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.4)
          %126 : Tensor = aten::add_(%num_batches_tracked.10, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.20 : bool = prim::GetAttr[name="training"](%_4.4)
      %running_mean.10 : Tensor = prim::GetAttr[name="running_mean"](%_4.4)
      %running_var.10 : Tensor = prim::GetAttr[name="running_var"](%_4.4)
      %weight.24 : Tensor = prim::GetAttr[name="weight"](%_4.4)
      %bias.24 : Tensor = prim::GetAttr[name="bias"](%_4.4)
       = prim::If(%training.20) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %132 : int[] = aten::size(%input3.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.12 : int = aten::__getitem__(%132, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %134 : int = aten::len(%132) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %135 : int = aten::sub(%134, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.24 : int = prim::Loop(%135, %69, %size_prods.12) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.12 : int, %size_prods0.26 : int):
              %139 : int = aten::add(%i.12, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %140 : int = aten::__getitem__(%132, %139) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.12 : int = aten::mul(%size_prods0.26, %140) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.12)
          %142 : bool = aten::eq(%size_prods0.24, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%142) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %143 : str = aten::format(%70, %132) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%143, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.5 : Tensor = aten::batch_norm(%input3.5, %weight.24, %bias.24, %running_mean.10, %running_var.10, %training.20, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.5 : Tensor = aten::gelu(%input4.5, %75) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %146 : int[] = prim::ListConstruct(%71, %77)
      %y.5 : Tensor = aten::mean(%input5.5, %146, %69, %78) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.5 : __torch__.torch.nn.modules.conv.___torch_mangle_6847.Conv2d = prim::GetAttr[name="conv1"](%_6.4)
      %weight.26 : Tensor = prim::GetAttr[name="weight"](%conv1.5)
      %bias.26 : Tensor? = prim::GetAttr[name="bias"](%conv1.5)
      %151 : int[] = prim::ListConstruct(%79, %79)
      %152 : int[] = prim::ListConstruct(%68, %68)
      %153 : int[] = prim::ListConstruct(%79, %79)
      %y0.5 : Tensor = aten::conv2d(%y.5, %weight.26, %bias.26, %151, %152, %153, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.5 : Tensor = aten::sigmoid(%y0.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.5 : Tensor = aten::mul(%y_out.5, %y0.5) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.5 : __torch__.torch.nn.modules.conv.___torch_mangle_6848.Conv2d = prim::GetAttr[name="conv2"](%_6.4)
      %weight.28 : Tensor = prim::GetAttr[name="weight"](%conv2.5)
      %bias.28 : Tensor? = prim::GetAttr[name="bias"](%conv2.5)
      %160 : int[] = prim::ListConstruct(%79, %79)
      %161 : int[] = prim::ListConstruct(%68, %68)
      %162 : int[] = prim::ListConstruct(%79, %79)
      %y_out1.5 : Tensor = aten::conv2d(%y_out0.5, %weight.28, %bias.28, %160, %161, %162, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.5 : Tensor = aten::sigmoid(%y_out1.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.5 : Tensor = aten::mul(%input5.5, %y_out2.5) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.30 : Tensor = prim::GetAttr[name="weight"](%_7.2)
      %bias.30 : Tensor? = prim::GetAttr[name="bias"](%_7.2)
      %168 : int[] = prim::ListConstruct(%79, %79)
      %169 : int[] = prim::ListConstruct(%68, %68)
      %170 : int[] = prim::ListConstruct(%79, %79)
      %input7.5 : Tensor = aten::conv2d(%input6.5, %weight.30, %bias.30, %168, %169, %170, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.22 : bool = prim::GetAttr[name="training"](%_8.2)
       = prim::If(%training.22) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.12 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.2)
          %174 : Tensor = aten::add_(%num_batches_tracked.12, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.24 : bool = prim::GetAttr[name="training"](%_8.2)
      %running_mean.12 : Tensor = prim::GetAttr[name="running_mean"](%_8.2)
      %running_var.12 : Tensor = prim::GetAttr[name="running_var"](%_8.2)
      %weight.32 : Tensor = prim::GetAttr[name="weight"](%_8.2)
      %bias.32 : Tensor = prim::GetAttr[name="bias"](%_8.2)
       = prim::If(%training.24) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %180 : int[] = aten::size(%input7.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.14 : int = aten::__getitem__(%180, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %182 : int = aten::len(%180) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %183 : int = aten::sub(%182, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.28 : int = prim::Loop(%183, %69, %size_prods.14) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.14 : int, %size_prods0.30 : int):
              %187 : int = aten::add(%i.14, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %188 : int = aten::__getitem__(%180, %187) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.14 : int = aten::mul(%size_prods0.30, %188) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.14)
          %190 : bool = aten::eq(%size_prods0.28, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%190) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %191 : str = aten::format(%70, %180) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%191, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %192 : Tensor = aten::batch_norm(%input7.5, %weight.32, %bias.32, %running_mean.12, %running_var.12, %training.24, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %193 : Tensor = aten::add(%x0.1, %192, %79) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%193)
    block1():
      %conv.4 : __torch__.torch.nn.modules.container.___torch_mangle_6851.Sequential = prim::GetAttr[name="conv"](%_0.3)
      %_0.9 : __torch__.torch.nn.modules.conv.___torch_mangle_6844.Conv2d = prim::GetAttr[name="0"](%conv.4)
      %_1.9 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6845.BatchNorm2d = prim::GetAttr[name="1"](%conv.4)
      %_3.6 : __torch__.torch.nn.modules.conv.___torch_mangle_6846.Conv2d = prim::GetAttr[name="3"](%conv.4)
      %_4.6 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6845.BatchNorm2d = prim::GetAttr[name="4"](%conv.4)
      %_6.6 : __torch__.utils_general_v2.___torch_mangle_6849.ECABlock = prim::GetAttr[name="6"](%conv.4)
      %_7.4 : __torch__.torch.nn.modules.conv.___torch_mangle_6850.Conv2d = prim::GetAttr[name="7"](%conv.4)
      %_8.4 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="8"](%conv.4)
      %weight.58 : Tensor = prim::GetAttr[name="weight"](%_0.9)
      %bias.58 : Tensor? = prim::GetAttr[name="bias"](%_0.9)
      %204 : int[] = prim::ListConstruct(%79, %79)
      %205 : int[] = prim::ListConstruct(%68, %68)
      %206 : int[] = prim::ListConstruct(%79, %79)
      %input0.5 : Tensor = aten::conv2d(%x0.1, %weight.58, %bias.58, %204, %205, %206, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.40 : bool = prim::GetAttr[name="training"](%_1.9)
       = prim::If(%training.40) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.20 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.9)
          %210 : Tensor = aten::add_(%num_batches_tracked.20, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.42 : bool = prim::GetAttr[name="training"](%_1.9)
      %running_mean.20 : Tensor = prim::GetAttr[name="running_mean"](%_1.9)
      %running_var.20 : Tensor = prim::GetAttr[name="running_var"](%_1.9)
      %weight.54 : Tensor = prim::GetAttr[name="weight"](%_1.9)
      %bias.54 : Tensor = prim::GetAttr[name="bias"](%_1.9)
       = prim::If(%training.42) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %216 : int[] = aten::size(%input0.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.16 : int = aten::__getitem__(%216, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %218 : int = aten::len(%216) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %219 : int = aten::sub(%218, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.32 : int = prim::Loop(%219, %69, %size_prods.16) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.16 : int, %size_prods0.34 : int):
              %223 : int = aten::add(%i.16, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %224 : int = aten::__getitem__(%216, %223) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.16 : int = aten::mul(%size_prods0.34, %224) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.16)
          %226 : bool = aten::eq(%size_prods0.32, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%226) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %227 : str = aten::format(%70, %216) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%227, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.5 : Tensor = aten::batch_norm(%input0.5, %weight.54, %bias.54, %running_mean.20, %running_var.20, %training.42, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.3 : Tensor = aten::gelu(%input1.5, %75) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.56 : Tensor = prim::GetAttr[name="weight"](%_3.6)
      %bias.56 : Tensor? = prim::GetAttr[name="bias"](%_3.6)
      %232 : int[] = prim::ListConstruct(%79, %79)
      %233 : int[] = prim::ListConstruct(%79, %79)
      %234 : int[] = prim::ListConstruct(%79, %79)
      %input3.3 : Tensor = aten::conv2d(%input2.3, %weight.56, %bias.56, %232, %233, %234, %76) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.44 : bool = prim::GetAttr[name="training"](%_4.6)
       = prim::If(%training.44) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.22 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.6)
          %238 : Tensor = aten::add_(%num_batches_tracked.22, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.46 : bool = prim::GetAttr[name="training"](%_4.6)
      %running_mean.22 : Tensor = prim::GetAttr[name="running_mean"](%_4.6)
      %running_var.22 : Tensor = prim::GetAttr[name="running_var"](%_4.6)
      %weight.60 : Tensor = prim::GetAttr[name="weight"](%_4.6)
      %bias.60 : Tensor = prim::GetAttr[name="bias"](%_4.6)
       = prim::If(%training.46) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %244 : int[] = aten::size(%input3.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.18 : int = aten::__getitem__(%244, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %246 : int = aten::len(%244) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %247 : int = aten::sub(%246, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.36 : int = prim::Loop(%247, %69, %size_prods.18) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.18 : int, %size_prods0.38 : int):
              %251 : int = aten::add(%i.18, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %252 : int = aten::__getitem__(%244, %251) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.18 : int = aten::mul(%size_prods0.38, %252) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.18)
          %254 : bool = aten::eq(%size_prods0.36, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%254) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %255 : str = aten::format(%70, %244) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%255, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.3 : Tensor = aten::batch_norm(%input3.3, %weight.60, %bias.60, %running_mean.22, %running_var.22, %training.46, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.3 : Tensor = aten::gelu(%input4.3, %75) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %258 : int[] = prim::ListConstruct(%71, %77)
      %y.3 : Tensor = aten::mean(%input5.3, %258, %69, %78) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.3 : __torch__.torch.nn.modules.conv.___torch_mangle_6847.Conv2d = prim::GetAttr[name="conv1"](%_6.6)
      %weight.52 : Tensor = prim::GetAttr[name="weight"](%conv1.3)
      %bias.52 : Tensor? = prim::GetAttr[name="bias"](%conv1.3)
      %263 : int[] = prim::ListConstruct(%79, %79)
      %264 : int[] = prim::ListConstruct(%68, %68)
      %265 : int[] = prim::ListConstruct(%79, %79)
      %y0.3 : Tensor = aten::conv2d(%y.3, %weight.52, %bias.52, %263, %264, %265, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.3 : Tensor = aten::sigmoid(%y0.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.3 : Tensor = aten::mul(%y_out.3, %y0.3) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.3 : __torch__.torch.nn.modules.conv.___torch_mangle_6848.Conv2d = prim::GetAttr[name="conv2"](%_6.6)
      %weight.64 : Tensor = prim::GetAttr[name="weight"](%conv2.3)
      %bias.64 : Tensor? = prim::GetAttr[name="bias"](%conv2.3)
      %272 : int[] = prim::ListConstruct(%79, %79)
      %273 : int[] = prim::ListConstruct(%68, %68)
      %274 : int[] = prim::ListConstruct(%79, %79)
      %y_out1.3 : Tensor = aten::conv2d(%y_out0.3, %weight.64, %bias.64, %272, %273, %274, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.3 : Tensor = aten::sigmoid(%y_out1.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.3 : Tensor = aten::mul(%input5.3, %y_out2.3) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.14 : Tensor = prim::GetAttr[name="weight"](%_7.4)
      %bias.14 : Tensor? = prim::GetAttr[name="bias"](%_7.4)
      %280 : int[] = prim::ListConstruct(%79, %79)
      %281 : int[] = prim::ListConstruct(%68, %68)
      %282 : int[] = prim::ListConstruct(%79, %79)
      %input7.3 : Tensor = aten::conv2d(%input6.3, %weight.14, %bias.14, %280, %281, %282, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.14 : bool = prim::GetAttr[name="training"](%_8.4)
       = prim::If(%training.14) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.8 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.4)
          %286 : Tensor = aten::add_(%num_batches_tracked.8, %79, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.26 : bool = prim::GetAttr[name="training"](%_8.4)
      %running_mean.8 : Tensor = prim::GetAttr[name="running_mean"](%_8.4)
      %running_var.8 : Tensor = prim::GetAttr[name="running_var"](%_8.4)
      %weight.16 : Tensor = prim::GetAttr[name="weight"](%_8.4)
      %bias.16 : Tensor = prim::GetAttr[name="bias"](%_8.4)
       = prim::If(%training.26) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %292 : int[] = aten::size(%input7.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.8 : int = aten::__getitem__(%292, %68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %294 : int = aten::len(%292) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %295 : int = aten::sub(%294, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.16 : int = prim::Loop(%295, %69, %size_prods.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.8 : int, %size_prods0.18 : int):
              %299 : int = aten::add(%i.8, %71) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %300 : int = aten::__getitem__(%292, %299) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.8 : int = aten::mul(%size_prods0.18, %300) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%69, %size_prods1.8)
          %302 : bool = aten::eq(%size_prods0.16, %79) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%302) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %303 : str = aten::format(%70, %292) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%303, %72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %304 : Tensor = aten::batch_norm(%input7.3, %weight.16, %bias.16, %running_mean.8, %running_var.8, %training.26, %74, %73, %69) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%304)
  %305 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %306 : int = prim::Constant[value=105]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %307 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %308 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %309 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %310 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %311 : int = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:33
  %312 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %313 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.4 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %315 : str = prim::Constant[value="none"]()
  %316 : NoneType = prim::Constant()
  %use_res_connect.4 : bool = prim::GetAttr[name="use_res_connect"](%_1.3)
  %x2.1 : Tensor = prim::If(%use_res_connect.4) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.6 : __torch__.torch.nn.modules.container.___torch_mangle_421.Sequential = prim::GetAttr[name="conv"](%_1.3)
      %_0.11 : __torch__.torch.nn.modules.conv.___torch_mangle_8.Conv2d = prim::GetAttr[name="0"](%conv.6)
      %_1.11 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_9.BatchNorm2d = prim::GetAttr[name="1"](%conv.6)
      %_3.8 : __torch__.torch.nn.modules.conv.___torch_mangle_10.Conv2d = prim::GetAttr[name="3"](%conv.6)
      %_4.8 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_9.BatchNorm2d = prim::GetAttr[name="4"](%conv.6)
      %_6.8 : __torch__.utils_general_v2.___torch_mangle_420.ECABlock = prim::GetAttr[name="6"](%conv.6)
      %_7.6 : __torch__.torch.nn.modules.conv.___torch_mangle_11.Conv2d = prim::GetAttr[name="7"](%conv.6)
      %_8.6 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_14.BatchNorm2d = prim::GetAttr[name="8"](%conv.6)
      %weight.66 : Tensor = prim::GetAttr[name="weight"](%_0.11)
      %bias.66 : Tensor? = prim::GetAttr[name="bias"](%_0.11)
      %329 : int[] = prim::ListConstruct(%311, %311)
      %330 : int[] = prim::ListConstruct(%310, %310)
      %331 : int[] = prim::ListConstruct(%311, %311)
      %input.2 : Tensor = aten::conv2d(%x1.1, %weight.66, %bias.66, %329, %330, %331, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.48 : bool = prim::GetAttr[name="training"](%_1.11)
       = prim::If(%training.48) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.24 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.11)
          %335 : Tensor = aten::add_(%num_batches_tracked.24, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.30 : bool = prim::GetAttr[name="training"](%_1.11)
      %running_mean.24 : Tensor = prim::GetAttr[name="running_mean"](%_1.11)
      %running_var.24 : Tensor = prim::GetAttr[name="running_var"](%_1.11)
      %weight.38 : Tensor = prim::GetAttr[name="weight"](%_1.11)
      %bias.38 : Tensor = prim::GetAttr[name="bias"](%_1.11)
       = prim::If(%training.30) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %341 : int[] = aten::size(%input.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.20 : int = aten::__getitem__(%341, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %343 : int = aten::len(%341) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %344 : int = aten::sub(%343, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.40 : int = prim::Loop(%344, %bn_training.4, %size_prods.20) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.20 : int, %size_prods0.42 : int):
              %348 : int = aten::add(%i.20, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %349 : int = aten::__getitem__(%341, %348) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.20 : int = aten::mul(%size_prods0.42, %349) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods1.20)
          %351 : bool = aten::eq(%size_prods0.40, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%351) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %352 : str = aten::format(%312, %341) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%352, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input0.9 : Tensor = aten::batch_norm(%input.2, %weight.38, %bias.38, %running_mean.24, %running_var.24, %training.30, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input1.9 : Tensor = aten::gelu(%input0.9, %315) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.40 : Tensor = prim::GetAttr[name="weight"](%_3.8)
      %bias.40 : Tensor? = prim::GetAttr[name="bias"](%_3.8)
      %357 : int[] = prim::ListConstruct(%309, %309)
      %358 : int[] = prim::ListConstruct(%309, %309)
      %359 : int[] = prim::ListConstruct(%311, %311)
      %input2.7 : Tensor = aten::conv2d(%input1.9, %weight.40, %bias.40, %357, %358, %359, %306) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.32 : bool = prim::GetAttr[name="training"](%_4.8)
       = prim::If(%training.32) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.16 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.8)
          %363 : Tensor = aten::add_(%num_batches_tracked.16, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.34 : bool = prim::GetAttr[name="training"](%_4.8)
      %running_mean.16 : Tensor = prim::GetAttr[name="running_mean"](%_4.8)
      %running_var.16 : Tensor = prim::GetAttr[name="running_var"](%_4.8)
      %weight.42 : Tensor = prim::GetAttr[name="weight"](%_4.8)
      %bias.42 : Tensor = prim::GetAttr[name="bias"](%_4.8)
       = prim::If(%training.34) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %369 : int[] = aten::size(%input2.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods2.2 : int = aten::__getitem__(%369, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %371 : int = aten::len(%369) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %372 : int = aten::sub(%371, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods3.1 : int = prim::Loop(%372, %bn_training.4, %size_prods2.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i0.2 : int, %size_prods3.8 : int):
              %376 : int = aten::add(%i0.2, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %377 : int = aten::__getitem__(%369, %376) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods4.2 : int = aten::mul(%size_prods3.8, %377) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods4.2)
          %379 : bool = aten::eq(%size_prods3.1, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%379) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %380 : str = aten::format(%312, %369) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%380, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input3.7 : Tensor = aten::batch_norm(%input2.7, %weight.42, %bias.42, %running_mean.16, %running_var.16, %training.34, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input4.7 : Tensor = aten::gelu(%input3.7, %315) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %383 : int[] = prim::ListConstruct(%309, %305)
      %y.7 : Tensor = aten::mean(%input4.7, %383, %bn_training.4, %316) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.7 : __torch__.torch.nn.modules.conv.___torch_mangle_418.Conv2d = prim::GetAttr[name="conv1"](%_6.8)
      %weight.44 : Tensor = prim::GetAttr[name="weight"](%conv1.7)
      %bias.44 : Tensor? = prim::GetAttr[name="bias"](%conv1.7)
      %388 : int[] = prim::ListConstruct(%311, %311)
      %389 : int[] = prim::ListConstruct(%310, %310)
      %390 : int[] = prim::ListConstruct(%311, %311)
      %y0.7 : Tensor = aten::conv2d(%y.7, %weight.44, %bias.44, %388, %389, %390, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.7 : Tensor = aten::sigmoid(%y0.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.7 : Tensor = aten::mul(%y_out.7, %y0.7) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.7 : __torch__.torch.nn.modules.conv.___torch_mangle_419.Conv2d = prim::GetAttr[name="conv2"](%_6.8)
      %weight.46 : Tensor = prim::GetAttr[name="weight"](%conv2.7)
      %bias.46 : Tensor? = prim::GetAttr[name="bias"](%conv2.7)
      %397 : int[] = prim::ListConstruct(%311, %311)
      %398 : int[] = prim::ListConstruct(%310, %310)
      %399 : int[] = prim::ListConstruct(%311, %311)
      %y_out1.7 : Tensor = aten::conv2d(%y_out0.7, %weight.46, %bias.46, %397, %398, %399, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.7 : Tensor = aten::sigmoid(%y_out1.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input5.7 : Tensor = aten::mul(%input4.7, %y_out2.7) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.48 : Tensor = prim::GetAttr[name="weight"](%_7.6)
      %bias.48 : Tensor? = prim::GetAttr[name="bias"](%_7.6)
      %405 : int[] = prim::ListConstruct(%311, %311)
      %406 : int[] = prim::ListConstruct(%310, %310)
      %407 : int[] = prim::ListConstruct(%311, %311)
      %input6.7 : Tensor = aten::conv2d(%input5.7, %weight.48, %bias.48, %405, %406, %407, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.36 : bool = prim::GetAttr[name="training"](%_8.6)
       = prim::If(%training.36) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.18 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.6)
          %411 : Tensor = aten::add_(%num_batches_tracked.18, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.38 : bool = prim::GetAttr[name="training"](%_8.6)
      %running_mean.18 : Tensor = prim::GetAttr[name="running_mean"](%_8.6)
      %running_var.18 : Tensor = prim::GetAttr[name="running_var"](%_8.6)
      %weight.50 : Tensor = prim::GetAttr[name="weight"](%_8.6)
      %bias.50 : Tensor = prim::GetAttr[name="bias"](%_8.6)
       = prim::If(%training.38) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %417 : int[] = aten::size(%input6.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods5.2 : int = aten::__getitem__(%417, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %419 : int = aten::len(%417) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %420 : int = aten::sub(%419, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods6.1 : int = prim::Loop(%420, %bn_training.4, %size_prods5.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i1.2 : int, %size_prods6.8 : int):
              %424 : int = aten::add(%i1.2, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %425 : int = aten::__getitem__(%417, %424) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods7.2 : int = aten::mul(%size_prods6.8, %425) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods7.2)
          %427 : bool = aten::eq(%size_prods6.1, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%427) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %428 : str = aten::format(%312, %417) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%428, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input7.7 : Tensor = aten::batch_norm(%input6.7, %weight.50, %bias.50, %running_mean.18, %running_var.18, %training.38, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %430 : Tensor = aten::add(%x1.1, %input7.7, %311) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%430)
    block1():
      %conv.8 : __torch__.torch.nn.modules.container.___torch_mangle_421.Sequential = prim::GetAttr[name="conv"](%_1.3)
      %_0.13 : __torch__.torch.nn.modules.conv.___torch_mangle_8.Conv2d = prim::GetAttr[name="0"](%conv.8)
      %_1.13 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_9.BatchNorm2d = prim::GetAttr[name="1"](%conv.8)
      %_3.10 : __torch__.torch.nn.modules.conv.___torch_mangle_10.Conv2d = prim::GetAttr[name="3"](%conv.8)
      %_4.10 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_9.BatchNorm2d = prim::GetAttr[name="4"](%conv.8)
      %_6.10 : __torch__.utils_general_v2.___torch_mangle_420.ECABlock = prim::GetAttr[name="6"](%conv.8)
      %_7.8 : __torch__.torch.nn.modules.conv.___torch_mangle_11.Conv2d = prim::GetAttr[name="7"](%conv.8)
      %_8.8 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_14.BatchNorm2d = prim::GetAttr[name="8"](%conv.8)
      %weight.84 : Tensor = prim::GetAttr[name="weight"](%_0.13)
      %bias.84 : Tensor? = prim::GetAttr[name="bias"](%_0.13)
      %441 : int[] = prim::ListConstruct(%311, %311)
      %442 : int[] = prim::ListConstruct(%310, %310)
      %443 : int[] = prim::ListConstruct(%311, %311)
      %input8.2 : Tensor = aten::conv2d(%x1.1, %weight.84, %bias.84, %441, %442, %443, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.64 : bool = prim::GetAttr[name="training"](%_1.13)
       = prim::If(%training.64) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.32 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.13)
          %447 : Tensor = aten::add_(%num_batches_tracked.32, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.66 : bool = prim::GetAttr[name="training"](%_1.13)
      %running_mean.32 : Tensor = prim::GetAttr[name="running_mean"](%_1.13)
      %running_var.32 : Tensor = prim::GetAttr[name="running_var"](%_1.13)
      %weight.86 : Tensor = prim::GetAttr[name="weight"](%_1.13)
      %bias.86 : Tensor = prim::GetAttr[name="bias"](%_1.13)
       = prim::If(%training.66) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %453 : int[] = aten::size(%input8.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods8.2 : int = aten::__getitem__(%453, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %455 : int = aten::len(%453) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %456 : int = aten::sub(%455, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods9.1 : int = prim::Loop(%456, %bn_training.4, %size_prods8.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i2.2 : int, %size_prods9.8 : int):
              %460 : int = aten::add(%i2.2, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %461 : int = aten::__getitem__(%453, %460) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods10.2 : int = aten::mul(%size_prods9.8, %461) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods10.2)
          %463 : bool = aten::eq(%size_prods9.1, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%463) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %464 : str = aten::format(%312, %453) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%464, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input9.2 : Tensor = aten::batch_norm(%input8.2, %weight.86, %bias.86, %running_mean.32, %running_var.32, %training.66, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input10.2 : Tensor = aten::gelu(%input9.2, %315) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.88 : Tensor = prim::GetAttr[name="weight"](%_3.10)
      %bias.88 : Tensor? = prim::GetAttr[name="bias"](%_3.10)
      %469 : int[] = prim::ListConstruct(%309, %309)
      %470 : int[] = prim::ListConstruct(%309, %309)
      %471 : int[] = prim::ListConstruct(%311, %311)
      %input11.2 : Tensor = aten::conv2d(%input10.2, %weight.88, %bias.88, %469, %470, %471, %306) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.68 : bool = prim::GetAttr[name="training"](%_4.10)
       = prim::If(%training.68) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.34 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.10)
          %475 : Tensor = aten::add_(%num_batches_tracked.34, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.70 : bool = prim::GetAttr[name="training"](%_4.10)
      %running_mean.34 : Tensor = prim::GetAttr[name="running_mean"](%_4.10)
      %running_var.34 : Tensor = prim::GetAttr[name="running_var"](%_4.10)
      %weight.90 : Tensor = prim::GetAttr[name="weight"](%_4.10)
      %bias.90 : Tensor = prim::GetAttr[name="bias"](%_4.10)
       = prim::If(%training.70) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %481 : int[] = aten::size(%input11.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods11.2 : int = aten::__getitem__(%481, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %483 : int = aten::len(%481) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %484 : int = aten::sub(%483, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods12.1 : int = prim::Loop(%484, %bn_training.4, %size_prods11.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i3.2 : int, %size_prods12.8 : int):
              %488 : int = aten::add(%i3.2, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %489 : int = aten::__getitem__(%481, %488) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods13.2 : int = aten::mul(%size_prods12.8, %489) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods13.2)
          %491 : bool = aten::eq(%size_prods12.1, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%491) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %492 : str = aten::format(%312, %481) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%492, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input12.2 : Tensor = aten::batch_norm(%input11.2, %weight.90, %bias.90, %running_mean.34, %running_var.34, %training.70, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input13.2 : Tensor = aten::gelu(%input12.2, %315) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %495 : int[] = prim::ListConstruct(%309, %305)
      %y1.2 : Tensor = aten::mean(%input13.2, %495, %bn_training.4, %316) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.11 : __torch__.torch.nn.modules.conv.___torch_mangle_418.Conv2d = prim::GetAttr[name="conv1"](%_6.10)
      %weight.92 : Tensor = prim::GetAttr[name="weight"](%conv1.11)
      %bias.92 : Tensor? = prim::GetAttr[name="bias"](%conv1.11)
      %500 : int[] = prim::ListConstruct(%311, %311)
      %501 : int[] = prim::ListConstruct(%310, %310)
      %502 : int[] = prim::ListConstruct(%311, %311)
      %y2.2 : Tensor = aten::conv2d(%y1.2, %weight.92, %bias.92, %500, %501, %502, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out3.2 : Tensor = aten::sigmoid(%y2.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out4.2 : Tensor = aten::mul(%y_out3.2, %y2.2) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.11 : __torch__.torch.nn.modules.conv.___torch_mangle_419.Conv2d = prim::GetAttr[name="conv2"](%_6.10)
      %weight.94 : Tensor = prim::GetAttr[name="weight"](%conv2.11)
      %bias.94 : Tensor? = prim::GetAttr[name="bias"](%conv2.11)
      %509 : int[] = prim::ListConstruct(%311, %311)
      %510 : int[] = prim::ListConstruct(%310, %310)
      %511 : int[] = prim::ListConstruct(%311, %311)
      %y_out5.2 : Tensor = aten::conv2d(%y_out4.2, %weight.94, %bias.94, %509, %510, %511, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out6.2 : Tensor = aten::sigmoid(%y_out5.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input14.2 : Tensor = aten::mul(%input13.2, %y_out6.2) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.96 : Tensor = prim::GetAttr[name="weight"](%_7.8)
      %bias.96 : Tensor? = prim::GetAttr[name="bias"](%_7.8)
      %517 : int[] = prim::ListConstruct(%311, %311)
      %518 : int[] = prim::ListConstruct(%310, %310)
      %519 : int[] = prim::ListConstruct(%311, %311)
      %input15.2 : Tensor = aten::conv2d(%input14.2, %weight.96, %bias.96, %517, %518, %519, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.72 : bool = prim::GetAttr[name="training"](%_8.8)
       = prim::If(%training.72) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.36 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.8)
          %523 : Tensor = aten::add_(%num_batches_tracked.36, %311, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.50 : bool = prim::GetAttr[name="training"](%_8.8)
      %running_mean.36 : Tensor = prim::GetAttr[name="running_mean"](%_8.8)
      %running_var.36 : Tensor = prim::GetAttr[name="running_var"](%_8.8)
      %weight.62 : Tensor = prim::GetAttr[name="weight"](%_8.8)
      %bias.62 : Tensor = prim::GetAttr[name="bias"](%_8.8)
       = prim::If(%training.50) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %529 : int[] = aten::size(%input15.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods14.2 : int = aten::__getitem__(%529, %310) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %531 : int = aten::len(%529) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %532 : int = aten::sub(%531, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods15.1 : int = prim::Loop(%532, %bn_training.4, %size_prods14.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i4.2 : int, %size_prods15.8 : int):
              %536 : int = aten::add(%i4.2, %309) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %537 : int = aten::__getitem__(%529, %536) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods16.2 : int = aten::mul(%size_prods15.8, %537) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.4, %size_prods16.2)
          %539 : bool = aten::eq(%size_prods15.1, %311) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%539) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %540 : str = aten::format(%312, %529) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%540, %313) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input16.2 : Tensor = aten::batch_norm(%input15.2, %weight.62, %bias.62, %running_mean.36, %running_var.36, %training.50, %308, %307, %bn_training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%input16.2)
  %542 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %543 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %544 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %545 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %546 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %547 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.6 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %549 : str = prim::Constant[value="none"]()
  %550 : int = prim::Constant[value=96]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %551 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %552 : NoneType = prim::Constant()
  %553 : int = prim::Constant[value=1]()
  %use_res_connect.6 : bool = prim::GetAttr[name="use_res_connect"](%_2)
  %x3.1 : Tensor = prim::If(%use_res_connect.6) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.10 : __torch__.torch.nn.modules.container.___torch_mangle_6853.Sequential = prim::GetAttr[name="conv"](%_2)
      %_0.15 : __torch__.torch.nn.modules.conv.___torch_mangle_214.Conv2d = prim::GetAttr[name="0"](%conv.10)
      %_1.15 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_215.BatchNorm2d = prim::GetAttr[name="1"](%conv.10)
      %_3.12 : __torch__.torch.nn.modules.conv.___torch_mangle_1401.Conv2d = prim::GetAttr[name="3"](%conv.10)
      %_4.12 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_215.BatchNorm2d = prim::GetAttr[name="4"](%conv.10)
      %_6.12 : __torch__.utils_general_v2.___torch_mangle_626.ECABlock = prim::GetAttr[name="6"](%conv.10)
      %_7.10 : __torch__.torch.nn.modules.conv.___torch_mangle_220.Conv2d = prim::GetAttr[name="7"](%conv.10)
      %_8.10 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_14.BatchNorm2d = prim::GetAttr[name="8"](%conv.10)
      %weight.100 : Tensor = prim::GetAttr[name="weight"](%_0.15)
      %bias.100 : Tensor? = prim::GetAttr[name="bias"](%_0.15)
      %566 : int[] = prim::ListConstruct(%553, %553)
      %567 : int[] = prim::ListConstruct(%542, %542)
      %568 : int[] = prim::ListConstruct(%553, %553)
      %input0.13 : Tensor = aten::conv2d(%x2.1, %weight.100, %bias.100, %566, %567, %568, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.76 : bool = prim::GetAttr[name="training"](%_1.15)
       = prim::If(%training.76) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.38 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.15)
          %572 : Tensor = aten::add_(%num_batches_tracked.38, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.54 : bool = prim::GetAttr[name="training"](%_1.15)
      %running_mean.38 : Tensor = prim::GetAttr[name="running_mean"](%_1.15)
      %running_var.38 : Tensor = prim::GetAttr[name="running_var"](%_1.15)
      %weight.70 : Tensor = prim::GetAttr[name="weight"](%_1.15)
      %bias.70 : Tensor = prim::GetAttr[name="bias"](%_1.15)
       = prim::If(%training.54) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %578 : int[] = aten::size(%input0.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.24 : int = aten::__getitem__(%578, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %580 : int = aten::len(%578) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %581 : int = aten::sub(%580, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.48 : int = prim::Loop(%581, %bn_training.6, %size_prods.24) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.24 : int, %size_prods0.50 : int):
              %585 : int = aten::add(%i.24, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %586 : int = aten::__getitem__(%578, %585) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.24 : int = aten::mul(%size_prods0.50, %586) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.24)
          %588 : bool = aten::eq(%size_prods0.48, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%588) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %589 : str = aten::format(%546, %578) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%589, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.13 : Tensor = aten::batch_norm(%input0.13, %weight.70, %bias.70, %running_mean.38, %running_var.38, %training.54, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.11 : Tensor = aten::gelu(%input1.13, %549) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.72 : Tensor = prim::GetAttr[name="weight"](%_3.12)
      %bias.72 : Tensor? = prim::GetAttr[name="bias"](%_3.12)
      %594 : int[] = prim::ListConstruct(%553, %553)
      %595 : int[] = prim::ListConstruct(%545, %545)
      %596 : int[] = prim::ListConstruct(%553, %553)
      %input3.11 : Tensor = aten::conv2d(%input2.11, %weight.72, %bias.72, %594, %595, %596, %550) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.56 : bool = prim::GetAttr[name="training"](%_4.12)
       = prim::If(%training.56) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.28 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.12)
          %600 : Tensor = aten::add_(%num_batches_tracked.28, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.58 : bool = prim::GetAttr[name="training"](%_4.12)
      %running_mean.28 : Tensor = prim::GetAttr[name="running_mean"](%_4.12)
      %running_var.28 : Tensor = prim::GetAttr[name="running_var"](%_4.12)
      %weight.74 : Tensor = prim::GetAttr[name="weight"](%_4.12)
      %bias.74 : Tensor = prim::GetAttr[name="bias"](%_4.12)
       = prim::If(%training.58) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %606 : int[] = aten::size(%input3.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.26 : int = aten::__getitem__(%606, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %608 : int = aten::len(%606) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %609 : int = aten::sub(%608, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.52 : int = prim::Loop(%609, %bn_training.6, %size_prods.26) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.26 : int, %size_prods0.54 : int):
              %613 : int = aten::add(%i.26, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %614 : int = aten::__getitem__(%606, %613) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.26 : int = aten::mul(%size_prods0.54, %614) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.26)
          %616 : bool = aten::eq(%size_prods0.52, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%616) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %617 : str = aten::format(%546, %606) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%617, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.11 : Tensor = aten::batch_norm(%input3.11, %weight.74, %bias.74, %running_mean.28, %running_var.28, %training.58, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.11 : Tensor = aten::gelu(%input4.11, %549) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %620 : int[] = prim::ListConstruct(%545, %551)
      %y.11 : Tensor = aten::mean(%input5.11, %620, %bn_training.6, %552) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.13 : __torch__.torch.nn.modules.conv.___torch_mangle_624.Conv2d = prim::GetAttr[name="conv1"](%_6.12)
      %weight.76 : Tensor = prim::GetAttr[name="weight"](%conv1.13)
      %bias.76 : Tensor? = prim::GetAttr[name="bias"](%conv1.13)
      %625 : int[] = prim::ListConstruct(%553, %553)
      %626 : int[] = prim::ListConstruct(%542, %542)
      %627 : int[] = prim::ListConstruct(%553, %553)
      %y0.11 : Tensor = aten::conv2d(%y.11, %weight.76, %bias.76, %625, %626, %627, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.11 : Tensor = aten::sigmoid(%y0.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.11 : Tensor = aten::mul(%y_out.11, %y0.11) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.13 : __torch__.torch.nn.modules.conv.___torch_mangle_625.Conv2d = prim::GetAttr[name="conv2"](%_6.12)
      %weight.78 : Tensor = prim::GetAttr[name="weight"](%conv2.13)
      %bias.78 : Tensor? = prim::GetAttr[name="bias"](%conv2.13)
      %634 : int[] = prim::ListConstruct(%553, %553)
      %635 : int[] = prim::ListConstruct(%542, %542)
      %636 : int[] = prim::ListConstruct(%553, %553)
      %y_out1.11 : Tensor = aten::conv2d(%y_out0.11, %weight.78, %bias.78, %634, %635, %636, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.11 : Tensor = aten::sigmoid(%y_out1.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.11 : Tensor = aten::mul(%input5.11, %y_out2.11) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.80 : Tensor = prim::GetAttr[name="weight"](%_7.10)
      %bias.80 : Tensor? = prim::GetAttr[name="bias"](%_7.10)
      %642 : int[] = prim::ListConstruct(%553, %553)
      %643 : int[] = prim::ListConstruct(%542, %542)
      %644 : int[] = prim::ListConstruct(%553, %553)
      %input7.11 : Tensor = aten::conv2d(%input6.11, %weight.80, %bias.80, %642, %643, %644, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.60 : bool = prim::GetAttr[name="training"](%_8.10)
       = prim::If(%training.60) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.30 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.10)
          %648 : Tensor = aten::add_(%num_batches_tracked.30, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.62 : bool = prim::GetAttr[name="training"](%_8.10)
      %running_mean.30 : Tensor = prim::GetAttr[name="running_mean"](%_8.10)
      %running_var.30 : Tensor = prim::GetAttr[name="running_var"](%_8.10)
      %weight.82 : Tensor = prim::GetAttr[name="weight"](%_8.10)
      %bias.82 : Tensor = prim::GetAttr[name="bias"](%_8.10)
       = prim::If(%training.62) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %654 : int[] = aten::size(%input7.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.28 : int = aten::__getitem__(%654, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %656 : int = aten::len(%654) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %657 : int = aten::sub(%656, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.56 : int = prim::Loop(%657, %bn_training.6, %size_prods.28) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.28 : int, %size_prods0.58 : int):
              %661 : int = aten::add(%i.28, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %662 : int = aten::__getitem__(%654, %661) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.28 : int = aten::mul(%size_prods0.58, %662) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.28)
          %664 : bool = aten::eq(%size_prods0.56, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%664) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %665 : str = aten::format(%546, %654) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%665, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %666 : Tensor = aten::batch_norm(%input7.11, %weight.82, %bias.82, %running_mean.30, %running_var.30, %training.62, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %667 : Tensor = aten::add(%x2.1, %666, %553) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%667)
    block1():
      %conv.12 : __torch__.torch.nn.modules.container.___torch_mangle_6853.Sequential = prim::GetAttr[name="conv"](%_2)
      %_0.17 : __torch__.torch.nn.modules.conv.___torch_mangle_214.Conv2d = prim::GetAttr[name="0"](%conv.12)
      %_1.17 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_215.BatchNorm2d = prim::GetAttr[name="1"](%conv.12)
      %_3.14 : __torch__.torch.nn.modules.conv.___torch_mangle_1401.Conv2d = prim::GetAttr[name="3"](%conv.12)
      %_4.14 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_215.BatchNorm2d = prim::GetAttr[name="4"](%conv.12)
      %_6.14 : __torch__.utils_general_v2.___torch_mangle_626.ECABlock = prim::GetAttr[name="6"](%conv.12)
      %_7.12 : __torch__.torch.nn.modules.conv.___torch_mangle_220.Conv2d = prim::GetAttr[name="7"](%conv.12)
      %_8.12 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_14.BatchNorm2d = prim::GetAttr[name="8"](%conv.12)
      %weight.116 : Tensor = prim::GetAttr[name="weight"](%_0.17)
      %bias.116 : Tensor? = prim::GetAttr[name="bias"](%_0.17)
      %678 : int[] = prim::ListConstruct(%553, %553)
      %679 : int[] = prim::ListConstruct(%542, %542)
      %680 : int[] = prim::ListConstruct(%553, %553)
      %input0.11 : Tensor = aten::conv2d(%x2.1, %weight.116, %bias.116, %678, %679, %680, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.88 : bool = prim::GetAttr[name="training"](%_1.17)
       = prim::If(%training.88) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.44 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.17)
          %684 : Tensor = aten::add_(%num_batches_tracked.44, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.90 : bool = prim::GetAttr[name="training"](%_1.17)
      %running_mean.44 : Tensor = prim::GetAttr[name="running_mean"](%_1.17)
      %running_var.44 : Tensor = prim::GetAttr[name="running_var"](%_1.17)
      %weight.118 : Tensor = prim::GetAttr[name="weight"](%_1.17)
      %bias.118 : Tensor = prim::GetAttr[name="bias"](%_1.17)
       = prim::If(%training.90) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %690 : int[] = aten::size(%input0.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.30 : int = aten::__getitem__(%690, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %692 : int = aten::len(%690) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %693 : int = aten::sub(%692, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.60 : int = prim::Loop(%693, %bn_training.6, %size_prods.30) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.30 : int, %size_prods0.62 : int):
              %697 : int = aten::add(%i.30, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %698 : int = aten::__getitem__(%690, %697) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.30 : int = aten::mul(%size_prods0.62, %698) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.30)
          %700 : bool = aten::eq(%size_prods0.60, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%700) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %701 : str = aten::format(%546, %690) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%701, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.11 : Tensor = aten::batch_norm(%input0.11, %weight.118, %bias.118, %running_mean.44, %running_var.44, %training.90, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.9 : Tensor = aten::gelu(%input1.11, %549) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.120 : Tensor = prim::GetAttr[name="weight"](%_3.14)
      %bias.120 : Tensor? = prim::GetAttr[name="bias"](%_3.14)
      %706 : int[] = prim::ListConstruct(%553, %553)
      %707 : int[] = prim::ListConstruct(%545, %545)
      %708 : int[] = prim::ListConstruct(%553, %553)
      %input3.9 : Tensor = aten::conv2d(%input2.9, %weight.120, %bias.120, %706, %707, %708, %550) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.92 : bool = prim::GetAttr[name="training"](%_4.14)
       = prim::If(%training.92) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.46 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.14)
          %712 : Tensor = aten::add_(%num_batches_tracked.46, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.94 : bool = prim::GetAttr[name="training"](%_4.14)
      %running_mean.46 : Tensor = prim::GetAttr[name="running_mean"](%_4.14)
      %running_var.46 : Tensor = prim::GetAttr[name="running_var"](%_4.14)
      %weight.122 : Tensor = prim::GetAttr[name="weight"](%_4.14)
      %bias.122 : Tensor = prim::GetAttr[name="bias"](%_4.14)
       = prim::If(%training.94) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %718 : int[] = aten::size(%input3.9) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.32 : int = aten::__getitem__(%718, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %720 : int = aten::len(%718) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %721 : int = aten::sub(%720, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.64 : int = prim::Loop(%721, %bn_training.6, %size_prods.32) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.32 : int, %size_prods0.66 : int):
              %725 : int = aten::add(%i.32, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %726 : int = aten::__getitem__(%718, %725) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.32 : int = aten::mul(%size_prods0.66, %726) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.32)
          %728 : bool = aten::eq(%size_prods0.64, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%728) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %729 : str = aten::format(%546, %718) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%729, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.9 : Tensor = aten::batch_norm(%input3.9, %weight.122, %bias.122, %running_mean.46, %running_var.46, %training.94, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.9 : Tensor = aten::gelu(%input4.9, %549) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %732 : int[] = prim::ListConstruct(%545, %551)
      %y.9 : Tensor = aten::mean(%input5.9, %732, %bn_training.6, %552) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.9 : __torch__.torch.nn.modules.conv.___torch_mangle_624.Conv2d = prim::GetAttr[name="conv1"](%_6.14)
      %weight.124 : Tensor = prim::GetAttr[name="weight"](%conv1.9)
      %bias.124 : Tensor? = prim::GetAttr[name="bias"](%conv1.9)
      %737 : int[] = prim::ListConstruct(%553, %553)
      %738 : int[] = prim::ListConstruct(%542, %542)
      %739 : int[] = prim::ListConstruct(%553, %553)
      %y0.9 : Tensor = aten::conv2d(%y.9, %weight.124, %bias.124, %737, %738, %739, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.9 : Tensor = aten::sigmoid(%y0.9) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.9 : Tensor = aten::mul(%y_out.9, %y0.9) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.9 : __torch__.torch.nn.modules.conv.___torch_mangle_625.Conv2d = prim::GetAttr[name="conv2"](%_6.14)
      %weight.98 : Tensor = prim::GetAttr[name="weight"](%conv2.9)
      %bias.98 : Tensor? = prim::GetAttr[name="bias"](%conv2.9)
      %746 : int[] = prim::ListConstruct(%553, %553)
      %747 : int[] = prim::ListConstruct(%542, %542)
      %748 : int[] = prim::ListConstruct(%553, %553)
      %y_out1.9 : Tensor = aten::conv2d(%y_out0.9, %weight.98, %bias.98, %746, %747, %748, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.9 : Tensor = aten::sigmoid(%y_out1.9) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.9 : Tensor = aten::mul(%input5.9, %y_out2.9) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.128 : Tensor = prim::GetAttr[name="weight"](%_7.12)
      %bias.128 : Tensor? = prim::GetAttr[name="bias"](%_7.12)
      %754 : int[] = prim::ListConstruct(%553, %553)
      %755 : int[] = prim::ListConstruct(%542, %542)
      %756 : int[] = prim::ListConstruct(%553, %553)
      %input7.9 : Tensor = aten::conv2d(%input6.9, %weight.128, %bias.128, %754, %755, %756, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.52 : bool = prim::GetAttr[name="training"](%_8.12)
       = prim::If(%training.52) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.26 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.12)
          %760 : Tensor = aten::add_(%num_batches_tracked.26, %553, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.74 : bool = prim::GetAttr[name="training"](%_8.12)
      %running_mean.26 : Tensor = prim::GetAttr[name="running_mean"](%_8.12)
      %running_var.26 : Tensor = prim::GetAttr[name="running_var"](%_8.12)
      %weight.68 : Tensor = prim::GetAttr[name="weight"](%_8.12)
      %bias.68 : Tensor = prim::GetAttr[name="bias"](%_8.12)
       = prim::If(%training.74) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %766 : int[] = aten::size(%input7.9) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.22 : int = aten::__getitem__(%766, %542) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %768 : int = aten::len(%766) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %769 : int = aten::sub(%768, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.44 : int = prim::Loop(%769, %bn_training.6, %size_prods.22) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.22 : int, %size_prods0.46 : int):
              %773 : int = aten::add(%i.22, %545) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %774 : int = aten::__getitem__(%766, %773) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.22 : int = aten::mul(%size_prods0.46, %774) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.6, %size_prods1.22)
          %776 : bool = aten::eq(%size_prods0.44, %553) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%776) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %777 : str = aten::format(%546, %766) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%777, %547) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %778 : Tensor = aten::batch_norm(%input7.9, %weight.68, %bias.68, %running_mean.26, %running_var.26, %training.74, %544, %543, %bn_training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%778)
  %779 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %780 : int = prim::Constant[value=224]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %781 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %782 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %783 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %784 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %785 : int = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:33
  %786 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %787 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.8 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %789 : str = prim::Constant[value="none"]()
  %790 : NoneType = prim::Constant()
  %use_res_connect.8 : bool = prim::GetAttr[name="use_res_connect"](%_3.2)
  %x4.1 : Tensor = prim::If(%use_res_connect.8) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.14 : __torch__.torch.nn.modules.container.___torch_mangle_2150.Sequential = prim::GetAttr[name="conv"](%_3.2)
      %_0.19 : __torch__.torch.nn.modules.conv.___torch_mangle_26.Conv2d = prim::GetAttr[name="0"](%conv.14)
      %_1.19 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_27.BatchNorm2d = prim::GetAttr[name="1"](%conv.14)
      %_3.16 : __torch__.torch.nn.modules.conv.___torch_mangle_432.Conv2d = prim::GetAttr[name="3"](%conv.14)
      %_4.16 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_27.BatchNorm2d = prim::GetAttr[name="4"](%conv.14)
      %_6.16 : __torch__.utils_general_v2.___torch_mangle_2149.ECABlock = prim::GetAttr[name="6"](%conv.14)
      %_7.14 : __torch__.torch.nn.modules.conv.___torch_mangle_32.Conv2d = prim::GetAttr[name="7"](%conv.14)
      %_8.14 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_33.BatchNorm2d = prim::GetAttr[name="8"](%conv.14)
      %weight.130 : Tensor = prim::GetAttr[name="weight"](%_0.19)
      %bias.130 : Tensor? = prim::GetAttr[name="bias"](%_0.19)
      %803 : int[] = prim::ListConstruct(%785, %785)
      %804 : int[] = prim::ListConstruct(%784, %784)
      %805 : int[] = prim::ListConstruct(%785, %785)
      %input.4 : Tensor = aten::conv2d(%x3.1, %weight.130, %bias.130, %803, %804, %805, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.96 : bool = prim::GetAttr[name="training"](%_1.19)
       = prim::If(%training.96) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.48 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.19)
          %809 : Tensor = aten::add_(%num_batches_tracked.48, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.78 : bool = prim::GetAttr[name="training"](%_1.19)
      %running_mean.48 : Tensor = prim::GetAttr[name="running_mean"](%_1.19)
      %running_var.48 : Tensor = prim::GetAttr[name="running_var"](%_1.19)
      %weight.102 : Tensor = prim::GetAttr[name="weight"](%_1.19)
      %bias.102 : Tensor = prim::GetAttr[name="bias"](%_1.19)
       = prim::If(%training.78) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %815 : int[] = aten::size(%input.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.34 : int = aten::__getitem__(%815, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %817 : int = aten::len(%815) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %818 : int = aten::sub(%817, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.68 : int = prim::Loop(%818, %bn_training.8, %size_prods.34) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.34 : int, %size_prods0.70 : int):
              %822 : int = aten::add(%i.34, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %823 : int = aten::__getitem__(%815, %822) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.34 : int = aten::mul(%size_prods0.70, %823) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods1.34)
          %825 : bool = aten::eq(%size_prods0.68, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%825) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %826 : str = aten::format(%786, %815) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%826, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input0.15 : Tensor = aten::batch_norm(%input.4, %weight.102, %bias.102, %running_mean.48, %running_var.48, %training.78, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input1.15 : Tensor = aten::gelu(%input0.15, %789) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.104 : Tensor = prim::GetAttr[name="weight"](%_3.16)
      %bias.104 : Tensor? = prim::GetAttr[name="bias"](%_3.16)
      %831 : int[] = prim::ListConstruct(%783, %783)
      %832 : int[] = prim::ListConstruct(%783, %783)
      %833 : int[] = prim::ListConstruct(%785, %785)
      %input2.13 : Tensor = aten::conv2d(%input1.15, %weight.104, %bias.104, %831, %832, %833, %780) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.80 : bool = prim::GetAttr[name="training"](%_4.16)
       = prim::If(%training.80) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.40 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.16)
          %837 : Tensor = aten::add_(%num_batches_tracked.40, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.82 : bool = prim::GetAttr[name="training"](%_4.16)
      %running_mean.40 : Tensor = prim::GetAttr[name="running_mean"](%_4.16)
      %running_var.40 : Tensor = prim::GetAttr[name="running_var"](%_4.16)
      %weight.106 : Tensor = prim::GetAttr[name="weight"](%_4.16)
      %bias.106 : Tensor = prim::GetAttr[name="bias"](%_4.16)
       = prim::If(%training.82) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %843 : int[] = aten::size(%input2.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods2.4 : int = aten::__getitem__(%843, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %845 : int = aten::len(%843) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %846 : int = aten::sub(%845, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods3.10 : int = prim::Loop(%846, %bn_training.8, %size_prods2.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i0.4 : int, %size_prods3.12 : int):
              %850 : int = aten::add(%i0.4, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %851 : int = aten::__getitem__(%843, %850) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods4.4 : int = aten::mul(%size_prods3.12, %851) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods4.4)
          %853 : bool = aten::eq(%size_prods3.10, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%853) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %854 : str = aten::format(%786, %843) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%854, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input3.13 : Tensor = aten::batch_norm(%input2.13, %weight.106, %bias.106, %running_mean.40, %running_var.40, %training.82, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input4.13 : Tensor = aten::gelu(%input3.13, %789) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %857 : int[] = prim::ListConstruct(%783, %779)
      %y.13 : Tensor = aten::mean(%input4.13, %857, %bn_training.8, %790) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.15 : __torch__.torch.nn.modules.conv.___torch_mangle_2147.Conv2d = prim::GetAttr[name="conv1"](%_6.16)
      %weight.108 : Tensor = prim::GetAttr[name="weight"](%conv1.15)
      %bias.108 : Tensor? = prim::GetAttr[name="bias"](%conv1.15)
      %862 : int[] = prim::ListConstruct(%785, %785)
      %863 : int[] = prim::ListConstruct(%784, %784)
      %864 : int[] = prim::ListConstruct(%785, %785)
      %y0.13 : Tensor = aten::conv2d(%y.13, %weight.108, %bias.108, %862, %863, %864, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.13 : Tensor = aten::sigmoid(%y0.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.13 : Tensor = aten::mul(%y_out.13, %y0.13) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.15 : __torch__.torch.nn.modules.conv.___torch_mangle_2148.Conv2d = prim::GetAttr[name="conv2"](%_6.16)
      %weight.110 : Tensor = prim::GetAttr[name="weight"](%conv2.15)
      %bias.110 : Tensor? = prim::GetAttr[name="bias"](%conv2.15)
      %871 : int[] = prim::ListConstruct(%785, %785)
      %872 : int[] = prim::ListConstruct(%784, %784)
      %873 : int[] = prim::ListConstruct(%785, %785)
      %y_out1.13 : Tensor = aten::conv2d(%y_out0.13, %weight.110, %bias.110, %871, %872, %873, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.13 : Tensor = aten::sigmoid(%y_out1.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input5.13 : Tensor = aten::mul(%input4.13, %y_out2.13) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.112 : Tensor = prim::GetAttr[name="weight"](%_7.14)
      %bias.112 : Tensor? = prim::GetAttr[name="bias"](%_7.14)
      %879 : int[] = prim::ListConstruct(%785, %785)
      %880 : int[] = prim::ListConstruct(%784, %784)
      %881 : int[] = prim::ListConstruct(%785, %785)
      %input6.13 : Tensor = aten::conv2d(%input5.13, %weight.112, %bias.112, %879, %880, %881, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.84 : bool = prim::GetAttr[name="training"](%_8.14)
       = prim::If(%training.84) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.42 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.14)
          %885 : Tensor = aten::add_(%num_batches_tracked.42, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.86 : bool = prim::GetAttr[name="training"](%_8.14)
      %running_mean.42 : Tensor = prim::GetAttr[name="running_mean"](%_8.14)
      %running_var.42 : Tensor = prim::GetAttr[name="running_var"](%_8.14)
      %weight.114 : Tensor = prim::GetAttr[name="weight"](%_8.14)
      %bias.114 : Tensor = prim::GetAttr[name="bias"](%_8.14)
       = prim::If(%training.86) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %891 : int[] = aten::size(%input6.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods5.4 : int = aten::__getitem__(%891, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %893 : int = aten::len(%891) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %894 : int = aten::sub(%893, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods6.10 : int = prim::Loop(%894, %bn_training.8, %size_prods5.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i1.4 : int, %size_prods6.12 : int):
              %898 : int = aten::add(%i1.4, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %899 : int = aten::__getitem__(%891, %898) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods7.4 : int = aten::mul(%size_prods6.12, %899) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods7.4)
          %901 : bool = aten::eq(%size_prods6.10, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%901) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %902 : str = aten::format(%786, %891) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%902, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input7.13 : Tensor = aten::batch_norm(%input6.13, %weight.114, %bias.114, %running_mean.42, %running_var.42, %training.86, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %904 : Tensor = aten::add(%x3.1, %input7.13, %785) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%904)
    block1():
      %conv.16 : __torch__.torch.nn.modules.container.___torch_mangle_2150.Sequential = prim::GetAttr[name="conv"](%_3.2)
      %_0.21 : __torch__.torch.nn.modules.conv.___torch_mangle_26.Conv2d = prim::GetAttr[name="0"](%conv.16)
      %_1.21 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_27.BatchNorm2d = prim::GetAttr[name="1"](%conv.16)
      %_3.18 : __torch__.torch.nn.modules.conv.___torch_mangle_432.Conv2d = prim::GetAttr[name="3"](%conv.16)
      %_4.18 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_27.BatchNorm2d = prim::GetAttr[name="4"](%conv.16)
      %_6.18 : __torch__.utils_general_v2.___torch_mangle_2149.ECABlock = prim::GetAttr[name="6"](%conv.16)
      %_7.16 : __torch__.torch.nn.modules.conv.___torch_mangle_32.Conv2d = prim::GetAttr[name="7"](%conv.16)
      %_8.16 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_33.BatchNorm2d = prim::GetAttr[name="8"](%conv.16)
      %weight.148 : Tensor = prim::GetAttr[name="weight"](%_0.21)
      %bias.148 : Tensor? = prim::GetAttr[name="bias"](%_0.21)
      %915 : int[] = prim::ListConstruct(%785, %785)
      %916 : int[] = prim::ListConstruct(%784, %784)
      %917 : int[] = prim::ListConstruct(%785, %785)
      %input8.4 : Tensor = aten::conv2d(%x3.1, %weight.148, %bias.148, %915, %916, %917, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.112 : bool = prim::GetAttr[name="training"](%_1.21)
       = prim::If(%training.112) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.56 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.21)
          %921 : Tensor = aten::add_(%num_batches_tracked.56, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.114 : bool = prim::GetAttr[name="training"](%_1.21)
      %running_mean.56 : Tensor = prim::GetAttr[name="running_mean"](%_1.21)
      %running_var.56 : Tensor = prim::GetAttr[name="running_var"](%_1.21)
      %weight.150 : Tensor = prim::GetAttr[name="weight"](%_1.21)
      %bias.150 : Tensor = prim::GetAttr[name="bias"](%_1.21)
       = prim::If(%training.114) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %927 : int[] = aten::size(%input8.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods8.4 : int = aten::__getitem__(%927, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %929 : int = aten::len(%927) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %930 : int = aten::sub(%929, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods9.10 : int = prim::Loop(%930, %bn_training.8, %size_prods8.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i2.4 : int, %size_prods9.12 : int):
              %934 : int = aten::add(%i2.4, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %935 : int = aten::__getitem__(%927, %934) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods10.4 : int = aten::mul(%size_prods9.12, %935) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods10.4)
          %937 : bool = aten::eq(%size_prods9.10, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%937) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %938 : str = aten::format(%786, %927) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%938, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input9.4 : Tensor = aten::batch_norm(%input8.4, %weight.150, %bias.150, %running_mean.56, %running_var.56, %training.114, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input10.4 : Tensor = aten::gelu(%input9.4, %789) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.152 : Tensor = prim::GetAttr[name="weight"](%_3.18)
      %bias.152 : Tensor? = prim::GetAttr[name="bias"](%_3.18)
      %943 : int[] = prim::ListConstruct(%783, %783)
      %944 : int[] = prim::ListConstruct(%783, %783)
      %945 : int[] = prim::ListConstruct(%785, %785)
      %input11.4 : Tensor = aten::conv2d(%input10.4, %weight.152, %bias.152, %943, %944, %945, %780) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.116 : bool = prim::GetAttr[name="training"](%_4.18)
       = prim::If(%training.116) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.58 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.18)
          %949 : Tensor = aten::add_(%num_batches_tracked.58, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.118 : bool = prim::GetAttr[name="training"](%_4.18)
      %running_mean.58 : Tensor = prim::GetAttr[name="running_mean"](%_4.18)
      %running_var.58 : Tensor = prim::GetAttr[name="running_var"](%_4.18)
      %weight.154 : Tensor = prim::GetAttr[name="weight"](%_4.18)
      %bias.154 : Tensor = prim::GetAttr[name="bias"](%_4.18)
       = prim::If(%training.118) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %955 : int[] = aten::size(%input11.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods11.4 : int = aten::__getitem__(%955, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %957 : int = aten::len(%955) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %958 : int = aten::sub(%957, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods12.10 : int = prim::Loop(%958, %bn_training.8, %size_prods11.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i3.4 : int, %size_prods12.12 : int):
              %962 : int = aten::add(%i3.4, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %963 : int = aten::__getitem__(%955, %962) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods13.4 : int = aten::mul(%size_prods12.12, %963) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods13.4)
          %965 : bool = aten::eq(%size_prods12.10, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%965) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %966 : str = aten::format(%786, %955) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%966, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input12.4 : Tensor = aten::batch_norm(%input11.4, %weight.154, %bias.154, %running_mean.58, %running_var.58, %training.118, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input13.4 : Tensor = aten::gelu(%input12.4, %789) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %969 : int[] = prim::ListConstruct(%783, %779)
      %y1.4 : Tensor = aten::mean(%input13.4, %969, %bn_training.8, %790) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.19 : __torch__.torch.nn.modules.conv.___torch_mangle_2147.Conv2d = prim::GetAttr[name="conv1"](%_6.18)
      %weight.156 : Tensor = prim::GetAttr[name="weight"](%conv1.19)
      %bias.156 : Tensor? = prim::GetAttr[name="bias"](%conv1.19)
      %974 : int[] = prim::ListConstruct(%785, %785)
      %975 : int[] = prim::ListConstruct(%784, %784)
      %976 : int[] = prim::ListConstruct(%785, %785)
      %y2.4 : Tensor = aten::conv2d(%y1.4, %weight.156, %bias.156, %974, %975, %976, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out3.4 : Tensor = aten::sigmoid(%y2.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out4.4 : Tensor = aten::mul(%y_out3.4, %y2.4) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.19 : __torch__.torch.nn.modules.conv.___torch_mangle_2148.Conv2d = prim::GetAttr[name="conv2"](%_6.18)
      %weight.158 : Tensor = prim::GetAttr[name="weight"](%conv2.19)
      %bias.158 : Tensor? = prim::GetAttr[name="bias"](%conv2.19)
      %983 : int[] = prim::ListConstruct(%785, %785)
      %984 : int[] = prim::ListConstruct(%784, %784)
      %985 : int[] = prim::ListConstruct(%785, %785)
      %y_out5.4 : Tensor = aten::conv2d(%y_out4.4, %weight.158, %bias.158, %983, %984, %985, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out6.4 : Tensor = aten::sigmoid(%y_out5.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input14.4 : Tensor = aten::mul(%input13.4, %y_out6.4) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.160 : Tensor = prim::GetAttr[name="weight"](%_7.16)
      %bias.160 : Tensor? = prim::GetAttr[name="bias"](%_7.16)
      %991 : int[] = prim::ListConstruct(%785, %785)
      %992 : int[] = prim::ListConstruct(%784, %784)
      %993 : int[] = prim::ListConstruct(%785, %785)
      %input15.4 : Tensor = aten::conv2d(%input14.4, %weight.160, %bias.160, %991, %992, %993, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.120 : bool = prim::GetAttr[name="training"](%_8.16)
       = prim::If(%training.120) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.60 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.16)
          %997 : Tensor = aten::add_(%num_batches_tracked.60, %785, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.98 : bool = prim::GetAttr[name="training"](%_8.16)
      %running_mean.60 : Tensor = prim::GetAttr[name="running_mean"](%_8.16)
      %running_var.60 : Tensor = prim::GetAttr[name="running_var"](%_8.16)
      %weight.126 : Tensor = prim::GetAttr[name="weight"](%_8.16)
      %bias.126 : Tensor = prim::GetAttr[name="bias"](%_8.16)
       = prim::If(%training.98) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1003 : int[] = aten::size(%input15.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods14.4 : int = aten::__getitem__(%1003, %784) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1005 : int = aten::len(%1003) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1006 : int = aten::sub(%1005, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods15.10 : int = prim::Loop(%1006, %bn_training.8, %size_prods14.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i4.4 : int, %size_prods15.12 : int):
              %1010 : int = aten::add(%i4.4, %783) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1011 : int = aten::__getitem__(%1003, %1010) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods16.4 : int = aten::mul(%size_prods15.12, %1011) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.8, %size_prods16.4)
          %1013 : bool = aten::eq(%size_prods15.10, %785) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1013) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1014 : str = aten::format(%786, %1003) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1014, %787) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input16.4 : Tensor = aten::batch_norm(%input15.4, %weight.126, %bias.126, %running_mean.60, %running_var.60, %training.98, %782, %781, %bn_training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%input16.4)
  %1016 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %1017 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %1018 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %1019 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %1020 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %1021 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.3 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %1023 : str = prim::Constant[value="none"]()
  %1024 : int = prim::Constant[value=320]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %1025 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %1026 : NoneType = prim::Constant()
  %1027 : int = prim::Constant[value=1]()
  %use_res_connect.10 : bool = prim::GetAttr[name="use_res_connect"](%_4.2)
  %x5.1 : Tensor = prim::If(%use_res_connect.10) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.18 : __torch__.torch.nn.modules.container.___torch_mangle_6855.Sequential = prim::GetAttr[name="conv"](%_4.2)
      %_0.23 : __torch__.torch.nn.modules.conv.___torch_mangle_36.Conv2d = prim::GetAttr[name="0"](%conv.18)
      %_1.23 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_18.BatchNorm2d = prim::GetAttr[name="1"](%conv.18)
      %_3.20 : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d = prim::GetAttr[name="3"](%conv.18)
      %_4.20 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_18.BatchNorm2d = prim::GetAttr[name="4"](%conv.18)
      %_6.20 : __torch__.utils_general_v2.___torch_mangle_46.ECABlock = prim::GetAttr[name="6"](%conv.18)
      %_7.18 : __torch__.torch.nn.modules.conv.___torch_mangle_41.Conv2d = prim::GetAttr[name="7"](%conv.18)
      %_8.18 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_33.BatchNorm2d = prim::GetAttr[name="8"](%conv.18)
      %weight.3 : Tensor = prim::GetAttr[name="weight"](%_0.23)
      %bias.3 : Tensor? = prim::GetAttr[name="bias"](%_0.23)
      %1040 : int[] = prim::ListConstruct(%1027, %1027)
      %1041 : int[] = prim::ListConstruct(%1016, %1016)
      %1042 : int[] = prim::ListConstruct(%1027, %1027)
      %input0.2 : Tensor = aten::conv2d(%x4.1, %weight.3, %bias.3, %1040, %1041, %1042, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.3 : bool = prim::GetAttr[name="training"](%_1.23)
       = prim::If(%training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.3 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.23)
          %1046 : Tensor = aten::add_(%num_batches_tracked.3, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.102 : bool = prim::GetAttr[name="training"](%_1.23)
      %running_mean.3 : Tensor = prim::GetAttr[name="running_mean"](%_1.23)
      %running_var.3 : Tensor = prim::GetAttr[name="running_var"](%_1.23)
      %weight.134 : Tensor = prim::GetAttr[name="weight"](%_1.23)
      %bias.134 : Tensor = prim::GetAttr[name="bias"](%_1.23)
       = prim::If(%training.102) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1052 : int[] = aten::size(%input0.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.3 : int = aten::__getitem__(%1052, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1054 : int = aten::len(%1052) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1055 : int = aten::sub(%1054, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.2 : int = prim::Loop(%1055, %bn_training.3, %size_prods.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.3 : int, %size_prods0.9 : int):
              %1059 : int = aten::add(%i.3, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1060 : int = aten::__getitem__(%1052, %1059) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.3 : int = aten::mul(%size_prods0.9, %1060) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.3)
          %1062 : bool = aten::eq(%size_prods0.2, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1062) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1063 : str = aten::format(%1020, %1052) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1063, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.2 : Tensor = aten::batch_norm(%input0.2, %weight.134, %bias.134, %running_mean.3, %running_var.3, %training.102, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.2 : Tensor = aten::gelu(%input1.2, %1023) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.136 : Tensor = prim::GetAttr[name="weight"](%_3.20)
      %bias.136 : Tensor? = prim::GetAttr[name="bias"](%_3.20)
      %1068 : int[] = prim::ListConstruct(%1027, %1027)
      %1069 : int[] = prim::ListConstruct(%1019, %1019)
      %1070 : int[] = prim::ListConstruct(%1027, %1027)
      %input3.2 : Tensor = aten::conv2d(%input2.2, %weight.136, %bias.136, %1068, %1069, %1070, %1024) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.104 : bool = prim::GetAttr[name="training"](%_4.20)
       = prim::If(%training.104) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.52 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.20)
          %1074 : Tensor = aten::add_(%num_batches_tracked.52, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.106 : bool = prim::GetAttr[name="training"](%_4.20)
      %running_mean.52 : Tensor = prim::GetAttr[name="running_mean"](%_4.20)
      %running_var.52 : Tensor = prim::GetAttr[name="running_var"](%_4.20)
      %weight.138 : Tensor = prim::GetAttr[name="weight"](%_4.20)
      %bias.138 : Tensor = prim::GetAttr[name="bias"](%_4.20)
       = prim::If(%training.106) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1080 : int[] = aten::size(%input3.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.5 : int = aten::__getitem__(%1080, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1082 : int = aten::len(%1080) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1083 : int = aten::sub(%1082, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.11 : int = prim::Loop(%1083, %bn_training.3, %size_prods.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.5 : int, %size_prods0.13 : int):
              %1087 : int = aten::add(%i.5, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1088 : int = aten::__getitem__(%1080, %1087) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.5 : int = aten::mul(%size_prods0.13, %1088) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.5)
          %1090 : bool = aten::eq(%size_prods0.11, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1090) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1091 : str = aten::format(%1020, %1080) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1091, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.2 : Tensor = aten::batch_norm(%input3.2, %weight.138, %bias.138, %running_mean.52, %running_var.52, %training.106, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.2 : Tensor = aten::gelu(%input4.2, %1023) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1094 : int[] = prim::ListConstruct(%1019, %1025)
      %y.2 : Tensor = aten::mean(%input5.2, %1094, %bn_training.3, %1026) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.2 : __torch__.torch.nn.modules.conv.___torch_mangle_44.Conv2d = prim::GetAttr[name="conv1"](%_6.20)
      %weight.140 : Tensor = prim::GetAttr[name="weight"](%conv1.2)
      %bias.140 : Tensor? = prim::GetAttr[name="bias"](%conv1.2)
      %1099 : int[] = prim::ListConstruct(%1027, %1027)
      %1100 : int[] = prim::ListConstruct(%1016, %1016)
      %1101 : int[] = prim::ListConstruct(%1027, %1027)
      %y0.2 : Tensor = aten::conv2d(%y.2, %weight.140, %bias.140, %1099, %1100, %1101, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.2 : Tensor = aten::sigmoid(%y0.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.2 : Tensor = aten::mul(%y_out.2, %y0.2) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.2 : __torch__.torch.nn.modules.conv.___torch_mangle_45.Conv2d = prim::GetAttr[name="conv2"](%_6.20)
      %weight.142 : Tensor = prim::GetAttr[name="weight"](%conv2.2)
      %bias.142 : Tensor? = prim::GetAttr[name="bias"](%conv2.2)
      %1108 : int[] = prim::ListConstruct(%1027, %1027)
      %1109 : int[] = prim::ListConstruct(%1016, %1016)
      %1110 : int[] = prim::ListConstruct(%1027, %1027)
      %y_out1.2 : Tensor = aten::conv2d(%y_out0.2, %weight.142, %bias.142, %1108, %1109, %1110, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.2 : Tensor = aten::sigmoid(%y_out1.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.2 : Tensor = aten::mul(%input5.2, %y_out2.2) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.144 : Tensor = prim::GetAttr[name="weight"](%_7.18)
      %bias.144 : Tensor? = prim::GetAttr[name="bias"](%_7.18)
      %1116 : int[] = prim::ListConstruct(%1027, %1027)
      %1117 : int[] = prim::ListConstruct(%1016, %1016)
      %1118 : int[] = prim::ListConstruct(%1027, %1027)
      %input7.2 : Tensor = aten::conv2d(%input6.2, %weight.144, %bias.144, %1116, %1117, %1118, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.108 : bool = prim::GetAttr[name="training"](%_8.18)
       = prim::If(%training.108) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.54 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.18)
          %1122 : Tensor = aten::add_(%num_batches_tracked.54, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.110 : bool = prim::GetAttr[name="training"](%_8.18)
      %running_mean.54 : Tensor = prim::GetAttr[name="running_mean"](%_8.18)
      %running_var.54 : Tensor = prim::GetAttr[name="running_var"](%_8.18)
      %weight.146 : Tensor = prim::GetAttr[name="weight"](%_8.18)
      %bias.146 : Tensor = prim::GetAttr[name="bias"](%_8.18)
       = prim::If(%training.110) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1128 : int[] = aten::size(%input7.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.7 : int = aten::__getitem__(%1128, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1130 : int = aten::len(%1128) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1131 : int = aten::sub(%1130, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.15 : int = prim::Loop(%1131, %bn_training.3, %size_prods.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.7 : int, %size_prods0.17 : int):
              %1135 : int = aten::add(%i.7, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1136 : int = aten::__getitem__(%1128, %1135) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.7 : int = aten::mul(%size_prods0.17, %1136) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.7)
          %1138 : bool = aten::eq(%size_prods0.15, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1138) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1139 : str = aten::format(%1020, %1128) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1139, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %1140 : Tensor = aten::batch_norm(%input7.2, %weight.146, %bias.146, %running_mean.54, %running_var.54, %training.110, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %1141 : Tensor = aten::add(%x4.1, %1140, %1027) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%1141)
    block1():
      %conv.20 : __torch__.torch.nn.modules.container.___torch_mangle_6855.Sequential = prim::GetAttr[name="conv"](%_4.2)
      %_0.25 : __torch__.torch.nn.modules.conv.___torch_mangle_36.Conv2d = prim::GetAttr[name="0"](%conv.20)
      %_1.25 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_18.BatchNorm2d = prim::GetAttr[name="1"](%conv.20)
      %_3.22 : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d = prim::GetAttr[name="3"](%conv.20)
      %_4.22 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_18.BatchNorm2d = prim::GetAttr[name="4"](%conv.20)
      %_6.22 : __torch__.utils_general_v2.___torch_mangle_46.ECABlock = prim::GetAttr[name="6"](%conv.20)
      %_7.20 : __torch__.torch.nn.modules.conv.___torch_mangle_41.Conv2d = prim::GetAttr[name="7"](%conv.20)
      %_8.20 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_33.BatchNorm2d = prim::GetAttr[name="8"](%conv.20)
      %weight.2 : Tensor = prim::GetAttr[name="weight"](%_0.25)
      %bias.2 : Tensor? = prim::GetAttr[name="bias"](%_0.25)
      %1152 : int[] = prim::ListConstruct(%1027, %1027)
      %1153 : int[] = prim::ListConstruct(%1016, %1016)
      %1154 : int[] = prim::ListConstruct(%1027, %1027)
      %input0.17 : Tensor = aten::conv2d(%x4.1, %weight.2, %bias.2, %1152, %1153, %1154, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.2 : bool = prim::GetAttr[name="training"](%_1.25)
       = prim::If(%training.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.2 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.25)
          %1158 : Tensor = aten::add_(%num_batches_tracked.2, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.4 : bool = prim::GetAttr[name="training"](%_1.25)
      %running_mean.2 : Tensor = prim::GetAttr[name="running_mean"](%_1.25)
      %running_var.2 : Tensor = prim::GetAttr[name="running_var"](%_1.25)
      %weight.4 : Tensor = prim::GetAttr[name="weight"](%_1.25)
      %bias.4 : Tensor = prim::GetAttr[name="bias"](%_1.25)
       = prim::If(%training.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1164 : int[] = aten::size(%input0.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.2 : int = aten::__getitem__(%1164, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1166 : int = aten::len(%1164) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1167 : int = aten::sub(%1166, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.1 : int = prim::Loop(%1167, %bn_training.3, %size_prods.2) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.2 : int, %size_prods0.8 : int):
              %1171 : int = aten::add(%i.2, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1172 : int = aten::__getitem__(%1164, %1171) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.2 : int = aten::mul(%size_prods0.8, %1172) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.2)
          %1174 : bool = aten::eq(%size_prods0.1, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1174) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1175 : str = aten::format(%1020, %1164) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1175, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input1.17 : Tensor = aten::batch_norm(%input0.17, %weight.4, %bias.4, %running_mean.2, %running_var.2, %training.4, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input2.15 : Tensor = aten::gelu(%input1.17, %1023) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.6 : Tensor = prim::GetAttr[name="weight"](%_3.22)
      %bias.6 : Tensor? = prim::GetAttr[name="bias"](%_3.22)
      %1180 : int[] = prim::ListConstruct(%1027, %1027)
      %1181 : int[] = prim::ListConstruct(%1019, %1019)
      %1182 : int[] = prim::ListConstruct(%1027, %1027)
      %input3.15 : Tensor = aten::conv2d(%input2.15, %weight.6, %bias.6, %1180, %1181, %1182, %1024) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.6 : bool = prim::GetAttr[name="training"](%_4.22)
       = prim::If(%training.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.4 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.22)
          %1186 : Tensor = aten::add_(%num_batches_tracked.4, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.8 : bool = prim::GetAttr[name="training"](%_4.22)
      %running_mean.4 : Tensor = prim::GetAttr[name="running_mean"](%_4.22)
      %running_var.4 : Tensor = prim::GetAttr[name="running_var"](%_4.22)
      %weight.8 : Tensor = prim::GetAttr[name="weight"](%_4.22)
      %bias.8 : Tensor = prim::GetAttr[name="bias"](%_4.22)
       = prim::If(%training.8) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1192 : int[] = aten::size(%input3.15) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.4 : int = aten::__getitem__(%1192, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1194 : int = aten::len(%1192) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1195 : int = aten::sub(%1194, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.10 : int = prim::Loop(%1195, %bn_training.3, %size_prods.4) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.4 : int, %size_prods0.12 : int):
              %1199 : int = aten::add(%i.4, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1200 : int = aten::__getitem__(%1192, %1199) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.4 : int = aten::mul(%size_prods0.12, %1200) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.4)
          %1202 : bool = aten::eq(%size_prods0.10, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1202) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1203 : str = aten::format(%1020, %1192) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1203, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input4.15 : Tensor = aten::batch_norm(%input3.15, %weight.8, %bias.8, %running_mean.4, %running_var.4, %training.8, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input5.15 : Tensor = aten::gelu(%input4.15, %1023) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1206 : int[] = prim::ListConstruct(%1019, %1025)
      %y.15 : Tensor = aten::mean(%input5.15, %1206, %bn_training.3, %1026) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.17 : __torch__.torch.nn.modules.conv.___torch_mangle_44.Conv2d = prim::GetAttr[name="conv1"](%_6.22)
      %weight.10 : Tensor = prim::GetAttr[name="weight"](%conv1.17)
      %bias.10 : Tensor? = prim::GetAttr[name="bias"](%conv1.17)
      %1211 : int[] = prim::ListConstruct(%1027, %1027)
      %1212 : int[] = prim::ListConstruct(%1016, %1016)
      %1213 : int[] = prim::ListConstruct(%1027, %1027)
      %y0.15 : Tensor = aten::conv2d(%y.15, %weight.10, %bias.10, %1211, %1212, %1213, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.15 : Tensor = aten::sigmoid(%y0.15) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.15 : Tensor = aten::mul(%y_out.15, %y0.15) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.17 : __torch__.torch.nn.modules.conv.___torch_mangle_45.Conv2d = prim::GetAttr[name="conv2"](%_6.22)
      %weight.162 : Tensor = prim::GetAttr[name="weight"](%conv2.17)
      %bias.162 : Tensor? = prim::GetAttr[name="bias"](%conv2.17)
      %1220 : int[] = prim::ListConstruct(%1027, %1027)
      %1221 : int[] = prim::ListConstruct(%1016, %1016)
      %1222 : int[] = prim::ListConstruct(%1027, %1027)
      %y_out1.15 : Tensor = aten::conv2d(%y_out0.15, %weight.162, %bias.162, %1220, %1221, %1222, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.15 : Tensor = aten::sigmoid(%y_out1.15) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input6.15 : Tensor = aten::mul(%input5.15, %y_out2.15) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.12 : Tensor = prim::GetAttr[name="weight"](%_7.20)
      %bias.12 : Tensor? = prim::GetAttr[name="bias"](%_7.20)
      %1228 : int[] = prim::ListConstruct(%1027, %1027)
      %1229 : int[] = prim::ListConstruct(%1016, %1016)
      %1230 : int[] = prim::ListConstruct(%1027, %1027)
      %input7.15 : Tensor = aten::conv2d(%input6.15, %weight.12, %bias.12, %1228, %1229, %1230, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.100 : bool = prim::GetAttr[name="training"](%_8.20)
       = prim::If(%training.100) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.50 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.20)
          %1234 : Tensor = aten::add_(%num_batches_tracked.50, %1027, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.122 : bool = prim::GetAttr[name="training"](%_8.20)
      %running_mean.50 : Tensor = prim::GetAttr[name="running_mean"](%_8.20)
      %running_var.50 : Tensor = prim::GetAttr[name="running_var"](%_8.20)
      %weight.132 : Tensor = prim::GetAttr[name="weight"](%_8.20)
      %bias.132 : Tensor = prim::GetAttr[name="bias"](%_8.20)
       = prim::If(%training.122) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1240 : int[] = aten::size(%input7.15) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.36 : int = aten::__getitem__(%1240, %1016) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1242 : int = aten::len(%1240) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1243 : int = aten::sub(%1242, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.72 : int = prim::Loop(%1243, %bn_training.3, %size_prods.36) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.36 : int, %size_prods0.74 : int):
              %1247 : int = aten::add(%i.36, %1019) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1248 : int = aten::__getitem__(%1240, %1247) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.36 : int = aten::mul(%size_prods0.74, %1248) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.3, %size_prods1.36)
          %1250 : bool = aten::eq(%size_prods0.72, %1027) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1250) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1251 : str = aten::format(%1020, %1240) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1251, %1021) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %1252 : Tensor = aten::batch_norm(%input7.15, %weight.132, %bias.132, %running_mean.50, %running_var.50, %training.122, %1018, %1017, %bn_training.3) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%1252)
  %1253 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %1254 : int = prim::Constant[value=640]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %1255 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %1256 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %1257 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %1258 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %1259 : int = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:33
  %1260 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %1261 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.10 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %1263 : str = prim::Constant[value="none"]()
  %1264 : NoneType = prim::Constant()
  %use_res_connect.12 : bool = prim::GetAttr[name="use_res_connect"](%_5)
  %x6.1 : Tensor = prim::If(%use_res_connect.12) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.22 : __torch__.torch.nn.modules.container.___torch_mangle_1795.Sequential = prim::GetAttr[name="conv"](%_5)
      %_0.27 : __torch__.torch.nn.modules.conv.___torch_mangle_1788.Conv2d = prim::GetAttr[name="0"](%conv.22)
      %_1.27 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1789.BatchNorm2d = prim::GetAttr[name="1"](%conv.22)
      %_3.24 : __torch__.torch.nn.modules.conv.___torch_mangle_1790.Conv2d = prim::GetAttr[name="3"](%conv.22)
      %_4.24 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1789.BatchNorm2d = prim::GetAttr[name="4"](%conv.22)
      %_6.24 : __torch__.utils_general_v2.___torch_mangle_1793.ECABlock = prim::GetAttr[name="6"](%conv.22)
      %_7.22 : __torch__.torch.nn.modules.conv.___torch_mangle_1794.Conv2d = prim::GetAttr[name="7"](%conv.22)
      %_8.22 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_48.BatchNorm2d = prim::GetAttr[name="8"](%conv.22)
      %weight.164 : Tensor = prim::GetAttr[name="weight"](%_0.27)
      %bias.164 : Tensor? = prim::GetAttr[name="bias"](%_0.27)
      %1277 : int[] = prim::ListConstruct(%1259, %1259)
      %1278 : int[] = prim::ListConstruct(%1258, %1258)
      %1279 : int[] = prim::ListConstruct(%1259, %1259)
      %input.6 : Tensor = aten::conv2d(%x5.1, %weight.164, %bias.164, %1277, %1278, %1279, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.124 : bool = prim::GetAttr[name="training"](%_1.27)
       = prim::If(%training.124) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.62 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.27)
          %1283 : Tensor = aten::add_(%num_batches_tracked.62, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.126 : bool = prim::GetAttr[name="training"](%_1.27)
      %running_mean.62 : Tensor = prim::GetAttr[name="running_mean"](%_1.27)
      %running_var.62 : Tensor = prim::GetAttr[name="running_var"](%_1.27)
      %weight.166 : Tensor = prim::GetAttr[name="weight"](%_1.27)
      %bias.166 : Tensor = prim::GetAttr[name="bias"](%_1.27)
       = prim::If(%training.126) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1289 : int[] = aten::size(%input.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.38 : int = aten::__getitem__(%1289, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1291 : int = aten::len(%1289) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1292 : int = aten::sub(%1291, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0.76 : int = prim::Loop(%1292, %bn_training.10, %size_prods.38) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.38 : int, %size_prods0.78 : int):
              %1296 : int = aten::add(%i.38, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1297 : int = aten::__getitem__(%1289, %1296) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.38 : int = aten::mul(%size_prods0.78, %1297) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods1.38)
          %1299 : bool = aten::eq(%size_prods0.76, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1299) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1300 : str = aten::format(%1260, %1289) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1300, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input0.19 : Tensor = aten::batch_norm(%input.6, %weight.166, %bias.166, %running_mean.62, %running_var.62, %training.126, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input1.19 : Tensor = aten::gelu(%input0.19, %1263) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.168 : Tensor = prim::GetAttr[name="weight"](%_3.24)
      %bias.168 : Tensor? = prim::GetAttr[name="bias"](%_3.24)
      %1305 : int[] = prim::ListConstruct(%1259, %1259)
      %1306 : int[] = prim::ListConstruct(%1259, %1259)
      %1307 : int[] = prim::ListConstruct(%1259, %1259)
      %input2.17 : Tensor = aten::conv2d(%input1.19, %weight.168, %bias.168, %1305, %1306, %1307, %1254) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.128 : bool = prim::GetAttr[name="training"](%_4.24)
       = prim::If(%training.128) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.64 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.24)
          %1311 : Tensor = aten::add_(%num_batches_tracked.64, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.130 : bool = prim::GetAttr[name="training"](%_4.24)
      %running_mean.64 : Tensor = prim::GetAttr[name="running_mean"](%_4.24)
      %running_var.64 : Tensor = prim::GetAttr[name="running_var"](%_4.24)
      %weight.170 : Tensor = prim::GetAttr[name="weight"](%_4.24)
      %bias.170 : Tensor = prim::GetAttr[name="bias"](%_4.24)
       = prim::If(%training.130) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1317 : int[] = aten::size(%input2.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods2.6 : int = aten::__getitem__(%1317, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1319 : int = aten::len(%1317) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1320 : int = aten::sub(%1319, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods3.14 : int = prim::Loop(%1320, %bn_training.10, %size_prods2.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i0.6 : int, %size_prods3.16 : int):
              %1324 : int = aten::add(%i0.6, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1325 : int = aten::__getitem__(%1317, %1324) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods4.6 : int = aten::mul(%size_prods3.16, %1325) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods4.6)
          %1327 : bool = aten::eq(%size_prods3.14, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1327) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1328 : str = aten::format(%1260, %1317) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1328, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input3.17 : Tensor = aten::batch_norm(%input2.17, %weight.170, %bias.170, %running_mean.64, %running_var.64, %training.130, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input4.17 : Tensor = aten::gelu(%input3.17, %1263) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1331 : int[] = prim::ListConstruct(%1257, %1253)
      %y.17 : Tensor = aten::mean(%input4.17, %1331, %bn_training.10, %1264) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.21 : __torch__.torch.nn.modules.conv.___torch_mangle_1791.Conv2d = prim::GetAttr[name="conv1"](%_6.24)
      %weight.172 : Tensor = prim::GetAttr[name="weight"](%conv1.21)
      %bias.172 : Tensor? = prim::GetAttr[name="bias"](%conv1.21)
      %1336 : int[] = prim::ListConstruct(%1259, %1259)
      %1337 : int[] = prim::ListConstruct(%1258, %1258)
      %1338 : int[] = prim::ListConstruct(%1259, %1259)
      %y0.17 : Tensor = aten::conv2d(%y.17, %weight.172, %bias.172, %1336, %1337, %1338, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.17 : Tensor = aten::sigmoid(%y0.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.17 : Tensor = aten::mul(%y_out.17, %y0.17) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.21 : __torch__.torch.nn.modules.conv.___torch_mangle_1792.Conv2d = prim::GetAttr[name="conv2"](%_6.24)
      %weight.174 : Tensor = prim::GetAttr[name="weight"](%conv2.21)
      %bias.174 : Tensor? = prim::GetAttr[name="bias"](%conv2.21)
      %1345 : int[] = prim::ListConstruct(%1259, %1259)
      %1346 : int[] = prim::ListConstruct(%1258, %1258)
      %1347 : int[] = prim::ListConstruct(%1259, %1259)
      %y_out1.17 : Tensor = aten::conv2d(%y_out0.17, %weight.174, %bias.174, %1345, %1346, %1347, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.17 : Tensor = aten::sigmoid(%y_out1.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input5.17 : Tensor = aten::mul(%input4.17, %y_out2.17) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.176 : Tensor = prim::GetAttr[name="weight"](%_7.22)
      %bias.176 : Tensor? = prim::GetAttr[name="bias"](%_7.22)
      %1353 : int[] = prim::ListConstruct(%1259, %1259)
      %1354 : int[] = prim::ListConstruct(%1258, %1258)
      %1355 : int[] = prim::ListConstruct(%1259, %1259)
      %input6.17 : Tensor = aten::conv2d(%input5.17, %weight.176, %bias.176, %1353, %1354, %1355, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.132 : bool = prim::GetAttr[name="training"](%_8.22)
       = prim::If(%training.132) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.66 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.22)
          %1359 : Tensor = aten::add_(%num_batches_tracked.66, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.134 : bool = prim::GetAttr[name="training"](%_8.22)
      %running_mean.66 : Tensor = prim::GetAttr[name="running_mean"](%_8.22)
      %running_var.66 : Tensor = prim::GetAttr[name="running_var"](%_8.22)
      %weight.178 : Tensor = prim::GetAttr[name="weight"](%_8.22)
      %bias.178 : Tensor = prim::GetAttr[name="bias"](%_8.22)
       = prim::If(%training.134) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1365 : int[] = aten::size(%input6.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods5.6 : int = aten::__getitem__(%1365, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1367 : int = aten::len(%1365) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1368 : int = aten::sub(%1367, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods6.14 : int = prim::Loop(%1368, %bn_training.10, %size_prods5.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i1.6 : int, %size_prods6.16 : int):
              %1372 : int = aten::add(%i1.6, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1373 : int = aten::__getitem__(%1365, %1372) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods7.6 : int = aten::mul(%size_prods6.16, %1373) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods7.6)
          %1375 : bool = aten::eq(%size_prods6.14, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1375) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1376 : str = aten::format(%1260, %1365) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1376, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input7.17 : Tensor = aten::batch_norm(%input6.17, %weight.178, %bias.178, %running_mean.66, %running_var.66, %training.134, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %1378 : Tensor = aten::add(%x5.1, %input7.17, %1259) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%1378)
    block1():
      %conv.24 : __torch__.torch.nn.modules.container.___torch_mangle_1795.Sequential = prim::GetAttr[name="conv"](%_5)
      %_0.29 : __torch__.torch.nn.modules.conv.___torch_mangle_1788.Conv2d = prim::GetAttr[name="0"](%conv.24)
      %_1.29 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1789.BatchNorm2d = prim::GetAttr[name="1"](%conv.24)
      %_3.26 : __torch__.torch.nn.modules.conv.___torch_mangle_1790.Conv2d = prim::GetAttr[name="3"](%conv.24)
      %_4.26 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1789.BatchNorm2d = prim::GetAttr[name="4"](%conv.24)
      %_6.26 : __torch__.utils_general_v2.___torch_mangle_1793.ECABlock = prim::GetAttr[name="6"](%conv.24)
      %_7.24 : __torch__.torch.nn.modules.conv.___torch_mangle_1794.Conv2d = prim::GetAttr[name="7"](%conv.24)
      %_8.24 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_48.BatchNorm2d = prim::GetAttr[name="8"](%conv.24)
      %weight.180 : Tensor = prim::GetAttr[name="weight"](%_0.29)
      %bias.180 : Tensor? = prim::GetAttr[name="bias"](%_0.29)
      %1389 : int[] = prim::ListConstruct(%1259, %1259)
      %1390 : int[] = prim::ListConstruct(%1258, %1258)
      %1391 : int[] = prim::ListConstruct(%1259, %1259)
      %input8.6 : Tensor = aten::conv2d(%x5.1, %weight.180, %bias.180, %1389, %1390, %1391, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.136 : bool = prim::GetAttr[name="training"](%_1.29)
       = prim::If(%training.136) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.68 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.29)
          %1395 : Tensor = aten::add_(%num_batches_tracked.68, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.138 : bool = prim::GetAttr[name="training"](%_1.29)
      %running_mean.68 : Tensor = prim::GetAttr[name="running_mean"](%_1.29)
      %running_var.68 : Tensor = prim::GetAttr[name="running_var"](%_1.29)
      %weight.182 : Tensor = prim::GetAttr[name="weight"](%_1.29)
      %bias.182 : Tensor = prim::GetAttr[name="bias"](%_1.29)
       = prim::If(%training.138) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1401 : int[] = aten::size(%input8.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods8.6 : int = aten::__getitem__(%1401, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1403 : int = aten::len(%1401) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1404 : int = aten::sub(%1403, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods9.14 : int = prim::Loop(%1404, %bn_training.10, %size_prods8.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i2.6 : int, %size_prods9.16 : int):
              %1408 : int = aten::add(%i2.6, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1409 : int = aten::__getitem__(%1401, %1408) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods10.6 : int = aten::mul(%size_prods9.16, %1409) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods10.6)
          %1411 : bool = aten::eq(%size_prods9.14, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1411) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1412 : str = aten::format(%1260, %1401) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1412, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input9.6 : Tensor = aten::batch_norm(%input8.6, %weight.182, %bias.182, %running_mean.68, %running_var.68, %training.138, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input10.6 : Tensor = aten::gelu(%input9.6, %1263) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.184 : Tensor = prim::GetAttr[name="weight"](%_3.26)
      %bias.184 : Tensor? = prim::GetAttr[name="bias"](%_3.26)
      %1417 : int[] = prim::ListConstruct(%1259, %1259)
      %1418 : int[] = prim::ListConstruct(%1259, %1259)
      %1419 : int[] = prim::ListConstruct(%1259, %1259)
      %input11.6 : Tensor = aten::conv2d(%input10.6, %weight.184, %bias.184, %1417, %1418, %1419, %1254) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.140 : bool = prim::GetAttr[name="training"](%_4.26)
       = prim::If(%training.140) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.70 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.26)
          %1423 : Tensor = aten::add_(%num_batches_tracked.70, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.142 : bool = prim::GetAttr[name="training"](%_4.26)
      %running_mean.70 : Tensor = prim::GetAttr[name="running_mean"](%_4.26)
      %running_var.70 : Tensor = prim::GetAttr[name="running_var"](%_4.26)
      %weight.186 : Tensor = prim::GetAttr[name="weight"](%_4.26)
      %bias.186 : Tensor = prim::GetAttr[name="bias"](%_4.26)
       = prim::If(%training.142) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1429 : int[] = aten::size(%input11.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods11.6 : int = aten::__getitem__(%1429, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1431 : int = aten::len(%1429) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1432 : int = aten::sub(%1431, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods12.14 : int = prim::Loop(%1432, %bn_training.10, %size_prods11.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i3.6 : int, %size_prods12.16 : int):
              %1436 : int = aten::add(%i3.6, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1437 : int = aten::__getitem__(%1429, %1436) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods13.6 : int = aten::mul(%size_prods12.16, %1437) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods13.6)
          %1439 : bool = aten::eq(%size_prods12.14, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1439) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1440 : str = aten::format(%1260, %1429) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1440, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input12.6 : Tensor = aten::batch_norm(%input11.6, %weight.186, %bias.186, %running_mean.70, %running_var.70, %training.142, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input13.6 : Tensor = aten::gelu(%input12.6, %1263) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1443 : int[] = prim::ListConstruct(%1257, %1253)
      %y1.6 : Tensor = aten::mean(%input13.6, %1443, %bn_training.10, %1264) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.23 : __torch__.torch.nn.modules.conv.___torch_mangle_1791.Conv2d = prim::GetAttr[name="conv1"](%_6.26)
      %weight.188 : Tensor = prim::GetAttr[name="weight"](%conv1.23)
      %bias.188 : Tensor? = prim::GetAttr[name="bias"](%conv1.23)
      %1448 : int[] = prim::ListConstruct(%1259, %1259)
      %1449 : int[] = prim::ListConstruct(%1258, %1258)
      %1450 : int[] = prim::ListConstruct(%1259, %1259)
      %y2.6 : Tensor = aten::conv2d(%y1.6, %weight.188, %bias.188, %1448, %1449, %1450, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out3.6 : Tensor = aten::sigmoid(%y2.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out4.6 : Tensor = aten::mul(%y_out3.6, %y2.6) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.23 : __torch__.torch.nn.modules.conv.___torch_mangle_1792.Conv2d = prim::GetAttr[name="conv2"](%_6.26)
      %weight.190 : Tensor = prim::GetAttr[name="weight"](%conv2.23)
      %bias.190 : Tensor? = prim::GetAttr[name="bias"](%conv2.23)
      %1457 : int[] = prim::ListConstruct(%1259, %1259)
      %1458 : int[] = prim::ListConstruct(%1258, %1258)
      %1459 : int[] = prim::ListConstruct(%1259, %1259)
      %y_out5.6 : Tensor = aten::conv2d(%y_out4.6, %weight.190, %bias.190, %1457, %1458, %1459, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out6.6 : Tensor = aten::sigmoid(%y_out5.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input14.6 : Tensor = aten::mul(%input13.6, %y_out6.6) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.192 : Tensor = prim::GetAttr[name="weight"](%_7.24)
      %bias.192 : Tensor? = prim::GetAttr[name="bias"](%_7.24)
      %1465 : int[] = prim::ListConstruct(%1259, %1259)
      %1466 : int[] = prim::ListConstruct(%1258, %1258)
      %1467 : int[] = prim::ListConstruct(%1259, %1259)
      %input15.6 : Tensor = aten::conv2d(%input14.6, %weight.192, %bias.192, %1465, %1466, %1467, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.144 : bool = prim::GetAttr[name="training"](%_8.24)
       = prim::If(%training.144) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.72 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.24)
          %1471 : Tensor = aten::add_(%num_batches_tracked.72, %1259, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.146 : bool = prim::GetAttr[name="training"](%_8.24)
      %running_mean.72 : Tensor = prim::GetAttr[name="running_mean"](%_8.24)
      %running_var.72 : Tensor = prim::GetAttr[name="running_var"](%_8.24)
      %weight.194 : Tensor = prim::GetAttr[name="weight"](%_8.24)
      %bias.194 : Tensor = prim::GetAttr[name="bias"](%_8.24)
       = prim::If(%training.146) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1477 : int[] = aten::size(%input15.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods14.6 : int = aten::__getitem__(%1477, %1258) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1479 : int = aten::len(%1477) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1480 : int = aten::sub(%1479, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods15.14 : int = prim::Loop(%1480, %bn_training.10, %size_prods14.6) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i4.6 : int, %size_prods15.16 : int):
              %1484 : int = aten::add(%i4.6, %1257) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1485 : int = aten::__getitem__(%1477, %1484) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods16.6 : int = aten::mul(%size_prods15.16, %1485) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.10, %size_prods16.6)
          %1487 : bool = aten::eq(%size_prods15.14, %1259) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1487) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1488 : str = aten::format(%1260, %1477) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1488, %1261) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input16.6 : Tensor = aten::batch_norm(%input15.6, %weight.194, %bias.194, %running_mean.72, %running_var.72, %training.146, %1256, %1255, %bn_training.10) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%input16.6)
  %1490 : int = prim::Constant[value=3]() # /root/NASChainC100/utils_general_v2.py:171:22
  %1491 : int = prim::Constant[value=672]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:75
  %1492 : float = prim::Constant[value=1.0000000000000001e-05]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:204:12
  %1493 : float = prim::Constant[value=0.10000000000000001]() # :0:0
  %1494 : int = prim::Constant[value=2]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:31
  %1495 : int = prim::Constant[value=0]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:46
  %1496 : int = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:550:33
  %1497 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
  %1498 : str = prim::Constant[value="builtins.ValueError"]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:452:18
  %bn_training.1 : bool = prim::Constant[value=1]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:184:26
  %1500 : str = prim::Constant[value="none"]()
  %1501 : NoneType = prim::Constant()
  %use_res_connect.1 : bool = prim::GetAttr[name="use_res_connect"](%_6.2)
  %x7.1 : Tensor = prim::If(%use_res_connect.1) # /root/NASChainC100/utils_general_v2.py:222:8
    block0():
      %conv.1 : __torch__.torch.nn.modules.container.___torch_mangle_1974.Sequential = prim::GetAttr[name="conv"](%_6.2)
      %_0.1 : __torch__.torch.nn.modules.conv.___torch_mangle_1426.Conv2d = prim::GetAttr[name="0"](%conv.1)
      %_1.1 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1427.BatchNorm2d = prim::GetAttr[name="1"](%conv.1)
      %_3.1 : __torch__.torch.nn.modules.conv.___torch_mangle_1428.Conv2d = prim::GetAttr[name="3"](%conv.1)
      %_4.1 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1427.BatchNorm2d = prim::GetAttr[name="4"](%conv.1)
      %_6.1 : __torch__.utils_general_v2.___torch_mangle_1973.ECABlock = prim::GetAttr[name="6"](%conv.1)
      %_7.1 : __torch__.torch.nn.modules.conv.___torch_mangle_1432.Conv2d = prim::GetAttr[name="7"](%conv.1)
      %_8.1 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_48.BatchNorm2d = prim::GetAttr[name="8"](%conv.1)
      %weight.196 : Tensor = prim::GetAttr[name="weight"](%_0.1)
      %bias.196 : Tensor? = prim::GetAttr[name="bias"](%_0.1)
      %1514 : int[] = prim::ListConstruct(%1496, %1496)
      %1515 : int[] = prim::ListConstruct(%1495, %1495)
      %1516 : int[] = prim::ListConstruct(%1496, %1496)
      %input.1 : Tensor = aten::conv2d(%x6.1, %weight.196, %bias.196, %1514, %1515, %1516, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.148 : bool = prim::GetAttr[name="training"](%_1.1)
       = prim::If(%training.148) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.1 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1.1)
          %1520 : Tensor = aten::add_(%num_batches_tracked.1, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.5 : bool = prim::GetAttr[name="training"](%_1.1)
      %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%_1.1)
      %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%_1.1)
      %weight.5 : Tensor = prim::GetAttr[name="weight"](%_1.1)
      %bias.5 : Tensor = prim::GetAttr[name="bias"](%_1.1)
       = prim::If(%training.5) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1526 : int[] = aten::size(%input.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods.1 : int = aten::__getitem__(%1526, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1528 : int = aten::len(%1526) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1529 : int = aten::sub(%1528, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods0 : int = prim::Loop(%1529, %bn_training.1, %size_prods.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i.1 : int, %size_prods0.7 : int):
              %1533 : int = aten::add(%i.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1534 : int = aten::__getitem__(%1526, %1533) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods1.1 : int = aten::mul(%size_prods0.7, %1534) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods1.1)
          %1536 : bool = aten::eq(%size_prods0, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1536) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1537 : str = aten::format(%1497, %1526) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1537, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input0.1 : Tensor = aten::batch_norm(%input.1, %weight.5, %bias.5, %running_mean.1, %running_var.1, %training.5, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input1.1 : Tensor = aten::gelu(%input0.1, %1500) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.7 : Tensor = prim::GetAttr[name="weight"](%_3.1)
      %bias.7 : Tensor? = prim::GetAttr[name="bias"](%_3.1)
      %1542 : int[] = prim::ListConstruct(%1496, %1496)
      %1543 : int[] = prim::ListConstruct(%1496, %1496)
      %1544 : int[] = prim::ListConstruct(%1496, %1496)
      %input2.1 : Tensor = aten::conv2d(%input1.1, %weight.7, %bias.7, %1542, %1543, %1544, %1491) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.7 : bool = prim::GetAttr[name="training"](%_4.1)
       = prim::If(%training.7) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.5 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4.1)
          %1548 : Tensor = aten::add_(%num_batches_tracked.5, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.9 : bool = prim::GetAttr[name="training"](%_4.1)
      %running_mean.5 : Tensor = prim::GetAttr[name="running_mean"](%_4.1)
      %running_var.5 : Tensor = prim::GetAttr[name="running_var"](%_4.1)
      %weight.9 : Tensor = prim::GetAttr[name="weight"](%_4.1)
      %bias.9 : Tensor = prim::GetAttr[name="bias"](%_4.1)
       = prim::If(%training.9) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1554 : int[] = aten::size(%input2.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods2.1 : int = aten::__getitem__(%1554, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1556 : int = aten::len(%1554) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1557 : int = aten::sub(%1556, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods3 : int = prim::Loop(%1557, %bn_training.1, %size_prods2.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i0.1 : int, %size_prods3.7 : int):
              %1561 : int = aten::add(%i0.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1562 : int = aten::__getitem__(%1554, %1561) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods4.1 : int = aten::mul(%size_prods3.7, %1562) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods4.1)
          %1564 : bool = aten::eq(%size_prods3, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1564) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1565 : str = aten::format(%1497, %1554) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1565, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input3.1 : Tensor = aten::batch_norm(%input2.1, %weight.9, %bias.9, %running_mean.5, %running_var.5, %training.9, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input4.1 : Tensor = aten::gelu(%input3.1, %1500) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1568 : int[] = prim::ListConstruct(%1494, %1490)
      %y.1 : Tensor = aten::mean(%input4.1, %1568, %bn_training.1, %1501) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1.1 : __torch__.torch.nn.modules.conv.___torch_mangle_1971.Conv2d = prim::GetAttr[name="conv1"](%_6.1)
      %weight.11 : Tensor = prim::GetAttr[name="weight"](%conv1.1)
      %bias.11 : Tensor? = prim::GetAttr[name="bias"](%conv1.1)
      %1573 : int[] = prim::ListConstruct(%1496, %1496)
      %1574 : int[] = prim::ListConstruct(%1495, %1495)
      %1575 : int[] = prim::ListConstruct(%1496, %1496)
      %y0.1 : Tensor = aten::conv2d(%y.1, %weight.11, %bias.11, %1573, %1574, %1575, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out.1 : Tensor = aten::sigmoid(%y0.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out0.1 : Tensor = aten::mul(%y_out.1, %y0.1) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2.1 : __torch__.torch.nn.modules.conv.___torch_mangle_1972.Conv2d = prim::GetAttr[name="conv2"](%_6.1)
      %weight.13 : Tensor = prim::GetAttr[name="weight"](%conv2.1)
      %bias.13 : Tensor? = prim::GetAttr[name="bias"](%conv2.1)
      %1582 : int[] = prim::ListConstruct(%1496, %1496)
      %1583 : int[] = prim::ListConstruct(%1495, %1495)
      %1584 : int[] = prim::ListConstruct(%1496, %1496)
      %y_out1.1 : Tensor = aten::conv2d(%y_out0.1, %weight.13, %bias.13, %1582, %1583, %1584, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out2.1 : Tensor = aten::sigmoid(%y_out1.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input5.1 : Tensor = aten::mul(%input4.1, %y_out2.1) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.15 : Tensor = prim::GetAttr[name="weight"](%_7.1)
      %bias.15 : Tensor? = prim::GetAttr[name="bias"](%_7.1)
      %1590 : int[] = prim::ListConstruct(%1496, %1496)
      %1591 : int[] = prim::ListConstruct(%1495, %1495)
      %1592 : int[] = prim::ListConstruct(%1496, %1496)
      %input6.1 : Tensor = aten::conv2d(%input5.1, %weight.15, %bias.15, %1590, %1591, %1592, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.11 : bool = prim::GetAttr[name="training"](%_8.1)
       = prim::If(%training.11) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.7 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8.1)
          %1596 : Tensor = aten::add_(%num_batches_tracked.7, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.13 : bool = prim::GetAttr[name="training"](%_8.1)
      %running_mean.7 : Tensor = prim::GetAttr[name="running_mean"](%_8.1)
      %running_var.7 : Tensor = prim::GetAttr[name="running_var"](%_8.1)
      %weight.17 : Tensor = prim::GetAttr[name="weight"](%_8.1)
      %bias.17 : Tensor = prim::GetAttr[name="bias"](%_8.1)
       = prim::If(%training.13) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1602 : int[] = aten::size(%input6.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods5.1 : int = aten::__getitem__(%1602, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1604 : int = aten::len(%1602) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1605 : int = aten::sub(%1604, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods6 : int = prim::Loop(%1605, %bn_training.1, %size_prods5.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i1.1 : int, %size_prods6.7 : int):
              %1609 : int = aten::add(%i1.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1610 : int = aten::__getitem__(%1602, %1609) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods7.1 : int = aten::mul(%size_prods6.7, %1610) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods7.1)
          %1612 : bool = aten::eq(%size_prods6, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1612) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1613 : str = aten::format(%1497, %1602) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1613, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input7.1 : Tensor = aten::batch_norm(%input6.1, %weight.17, %bias.17, %running_mean.7, %running_var.7, %training.13, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %1615 : Tensor = aten::add(%x6.1, %input7.1, %1496) # /root/NASChainC100/utils_general_v2.py:223:19
      -> (%1615)
    block1():
      %conv : __torch__.torch.nn.modules.container.___torch_mangle_1974.Sequential = prim::GetAttr[name="conv"](%_6.2)
      %_0 : __torch__.torch.nn.modules.conv.___torch_mangle_1426.Conv2d = prim::GetAttr[name="0"](%conv)
      %_1 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1427.BatchNorm2d = prim::GetAttr[name="1"](%conv)
      %_3 : __torch__.torch.nn.modules.conv.___torch_mangle_1428.Conv2d = prim::GetAttr[name="3"](%conv)
      %_4 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_1427.BatchNorm2d = prim::GetAttr[name="4"](%conv)
      %_6 : __torch__.utils_general_v2.___torch_mangle_1973.ECABlock = prim::GetAttr[name="6"](%conv)
      %_7 : __torch__.torch.nn.modules.conv.___torch_mangle_1432.Conv2d = prim::GetAttr[name="7"](%conv)
      %_8 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_48.BatchNorm2d = prim::GetAttr[name="8"](%conv)
      %weight.19 : Tensor = prim::GetAttr[name="weight"](%_0)
      %bias.19 : Tensor? = prim::GetAttr[name="bias"](%_0)
      %1626 : int[] = prim::ListConstruct(%1496, %1496)
      %1627 : int[] = prim::ListConstruct(%1495, %1495)
      %1628 : int[] = prim::ListConstruct(%1496, %1496)
      %input8.1 : Tensor = aten::conv2d(%x6.1, %weight.19, %bias.19, %1626, %1627, %1628, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.15 : bool = prim::GetAttr[name="training"](%_1)
       = prim::If(%training.15) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.9 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_1)
          %1632 : Tensor = aten::add_(%num_batches_tracked.9, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.17 : bool = prim::GetAttr[name="training"](%_1)
      %running_mean.9 : Tensor = prim::GetAttr[name="running_mean"](%_1)
      %running_var.9 : Tensor = prim::GetAttr[name="running_var"](%_1)
      %weight.21 : Tensor = prim::GetAttr[name="weight"](%_1)
      %bias.21 : Tensor = prim::GetAttr[name="bias"](%_1)
       = prim::If(%training.17) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1638 : int[] = aten::size(%input8.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods8.1 : int = aten::__getitem__(%1638, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1640 : int = aten::len(%1638) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1641 : int = aten::sub(%1640, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods9 : int = prim::Loop(%1641, %bn_training.1, %size_prods8.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i2.1 : int, %size_prods9.7 : int):
              %1645 : int = aten::add(%i2.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1646 : int = aten::__getitem__(%1638, %1645) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods10.1 : int = aten::mul(%size_prods9.7, %1646) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods10.1)
          %1648 : bool = aten::eq(%size_prods9, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1648) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1649 : str = aten::format(%1497, %1638) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1649, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input9.1 : Tensor = aten::batch_norm(%input8.1, %weight.21, %bias.21, %running_mean.9, %running_var.9, %training.17, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input10.1 : Tensor = aten::gelu(%input9.1, %1500) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %weight.23 : Tensor = prim::GetAttr[name="weight"](%_3)
      %bias.23 : Tensor? = prim::GetAttr[name="bias"](%_3)
      %1654 : int[] = prim::ListConstruct(%1496, %1496)
      %1655 : int[] = prim::ListConstruct(%1496, %1496)
      %1656 : int[] = prim::ListConstruct(%1496, %1496)
      %input11.1 : Tensor = aten::conv2d(%input10.1, %weight.23, %bias.23, %1654, %1655, %1656, %1491) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.19 : bool = prim::GetAttr[name="training"](%_4)
       = prim::If(%training.19) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked.11 : Tensor = prim::GetAttr[name="num_batches_tracked"](%_4)
          %1660 : Tensor = aten::add_(%num_batches_tracked.11, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training.21 : bool = prim::GetAttr[name="training"](%_4)
      %running_mean.11 : Tensor = prim::GetAttr[name="running_mean"](%_4)
      %running_var.11 : Tensor = prim::GetAttr[name="running_var"](%_4)
      %weight.25 : Tensor = prim::GetAttr[name="weight"](%_4)
      %bias.25 : Tensor = prim::GetAttr[name="bias"](%_4)
       = prim::If(%training.21) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1666 : int[] = aten::size(%input11.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods11.1 : int = aten::__getitem__(%1666, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1668 : int = aten::len(%1666) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1669 : int = aten::sub(%1668, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods12 : int = prim::Loop(%1669, %bn_training.1, %size_prods11.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i3.1 : int, %size_prods12.7 : int):
              %1673 : int = aten::add(%i3.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1674 : int = aten::__getitem__(%1666, %1673) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods13.1 : int = aten::mul(%size_prods12.7, %1674) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods13.1)
          %1676 : bool = aten::eq(%size_prods12, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1676) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1677 : str = aten::format(%1497, %1666) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1677, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input12.1 : Tensor = aten::batch_norm(%input11.1, %weight.25, %bias.25, %running_mean.11, %running_var.11, %training.21, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      %input13.1 : Tensor = aten::gelu(%input12.1, %1500) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:734:15
      %1680 : int[] = prim::ListConstruct(%1494, %1490)
      %y1.1 : Tensor = aten::mean(%input13.1, %1680, %bn_training.1, %1501) # /root/NASChainC100/utils_general_v2.py:171:12
      %conv1 : __torch__.torch.nn.modules.conv.___torch_mangle_1971.Conv2d = prim::GetAttr[name="conv1"](%_6)
      %weight.27 : Tensor = prim::GetAttr[name="weight"](%conv1)
      %bias.27 : Tensor? = prim::GetAttr[name="bias"](%conv1)
      %1685 : int[] = prim::ListConstruct(%1496, %1496)
      %1686 : int[] = prim::ListConstruct(%1495, %1495)
      %1687 : int[] = prim::ListConstruct(%1496, %1496)
      %y2.1 : Tensor = aten::conv2d(%y1.1, %weight.27, %bias.27, %1685, %1686, %1687, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out3.1 : Tensor = aten::sigmoid(%y2.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %y_out4.1 : Tensor = aten::mul(%y_out3.1, %y2.1) # /root/NASChainC100/utils_general_v2.py:174:16
      %conv2 : __torch__.torch.nn.modules.conv.___torch_mangle_1972.Conv2d = prim::GetAttr[name="conv2"](%_6)
      %weight.29 : Tensor = prim::GetAttr[name="weight"](%conv2)
      %bias.29 : Tensor? = prim::GetAttr[name="bias"](%conv2)
      %1694 : int[] = prim::ListConstruct(%1496, %1496)
      %1695 : int[] = prim::ListConstruct(%1495, %1495)
      %1696 : int[] = prim::ListConstruct(%1496, %1496)
      %y_out5.1 : Tensor = aten::conv2d(%y_out4.1, %weight.29, %bias.29, %1694, %1695, %1696, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %y_out6.1 : Tensor = aten::sigmoid(%y_out5.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/activation.py:327:15
      %input14.1 : Tensor = aten::mul(%input13.1, %y_out6.1) # /root/NASChainC100/utils_general_v2.py:177:15
      %weight.31 : Tensor = prim::GetAttr[name="weight"](%_7)
      %bias.31 : Tensor? = prim::GetAttr[name="bias"](%_7)
      %1702 : int[] = prim::ListConstruct(%1496, %1496)
      %1703 : int[] = prim::ListConstruct(%1495, %1495)
      %1704 : int[] = prim::ListConstruct(%1496, %1496)
      %input15.1 : Tensor = aten::conv2d(%input14.1, %weight.31, %bias.31, %1702, %1703, %1704, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/conv.py:549:15
      %training.23 : bool = prim::GetAttr[name="training"](%_8)
       = prim::If(%training.23) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:170:11
        block0():
          %num_batches_tracked : Tensor = prim::GetAttr[name="num_batches_tracked"](%_8)
          %1708 : Tensor = aten::add_(%num_batches_tracked, %1496, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py:173:16
          -> ()
        block1():
          -> ()
      %training : bool = prim::GetAttr[name="training"](%_8)
      %running_mean : Tensor = prim::GetAttr[name="running_mean"](%_8)
      %running_var : Tensor = prim::GetAttr[name="running_var"](%_8)
      %weight : Tensor = prim::GetAttr[name="weight"](%_8)
      %bias : Tensor = prim::GetAttr[name="bias"](%_8)
       = prim::If(%training) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2809:4
        block0():
          %1714 : int[] = aten::size(%input15.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2810:27
          %size_prods14.1 : int = aten::__getitem__(%1714, %1495) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2772:17
          %1716 : int = aten::len(%1714) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %1717 : int = aten::sub(%1716, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:19
          %size_prods15 : int = prim::Loop(%1717, %bn_training.1, %size_prods14.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2773:4
            block0(%i4.1 : int, %size_prods15.7 : int):
              %1721 : int = aten::add(%i4.1, %1494) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:27
              %1722 : int = aten::__getitem__(%1714, %1721) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:22
              %size_prods16.1 : int = aten::mul(%size_prods15.7, %1722) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2774:8
              -> (%bn_training.1, %size_prods16.1)
          %1724 : bool = aten::eq(%size_prods15, %1496) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:7
           = prim::If(%1724) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2775:4
            block0():
              %1725 : str = aten::format(%1497, %1714) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2777:12
               = prim::RaiseException(%1725, %1498) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2776:8
              -> ()
            block1():
              -> ()
          -> ()
        block1():
          -> ()
      %input16.1 : Tensor = aten::batch_norm(%input15.1, %weight, %bias, %running_mean, %running_var, %training, %1493, %1492, %bn_training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:2812:11
      -> (%input16.1)
  %23 : int[] = prim::ListConstruct(%4, %5)
  %x8.1 : Tensor = aten::mean(%x7.1, %23, %3, %2) # /root/NASChainC100/utils_general_v2.py:274:12
  %dropout.1 : __torch__.torch.nn.modules.dropout.___torch_mangle_6858.Dropout = prim::GetAttr[name="dropout"](%self.1)
  %1727 : float = prim::Constant[value=0.15585476936126677]() # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/dropout.py:70:32
  %training.1 : bool = prim::GetAttr[name="training"](%dropout.1)
  %x9.1 : Tensor = aten::dropout(%x8.1, %1727, %training.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/functional.py:1425:57
  %classifier.1 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="classifier"](%self.1)
  %weight.1 : Tensor = prim::GetAttr[name="weight"](%classifier.1)
  %bias.1 : Tensor = prim::GetAttr[name="bias"](%classifier.1)
  %1732 : Tensor = aten::linear(%x9.1, %weight.1, %bias.1) # /opt/conda/envs/myenv/lib/python3.10/site-packages/torch/nn/modules/linear.py:125:15
  return (%1732)
